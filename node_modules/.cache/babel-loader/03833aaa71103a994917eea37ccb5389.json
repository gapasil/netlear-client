{"ast":null,"code":"import axios from \"axios\";\nimport { url } from \"../../conf\";\nexport const AddUser = async (objUser, img, cb, cbb, method) => {\n  const date = Date.now();\n\n  if (img) {\n    objUser.avatar = `${date}${img.name}`;\n  } else {\n    objUser.avatar = \"defaultimg.jpg\";\n  }\n\n  let eror = result => {\n    result.errors.errors.map((obj, index) => {\n      const objErr = {};\n      let ref = obj.param;\n      let message = obj.msg;\n      objErr.message = message;\n      objErr.ref = ref;\n      cb(objErr);\n    });\n  };\n\n  if (method == \"email\") {\n    delete objUser.phoneNumber;\n    fetch(`${url}auth/registeremail`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify(objUser)\n    }).then(responce => {\n      return responce.json();\n    }).then(result => {\n      if (result.errors) {\n        eror(result);\n      }\n\n      {\n        cbb(result.message);\n      }\n    });\n  } else {\n    delete objUser.email;\n    fetch(`${url}auth/registerphone`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify(objUser)\n    }).then(responce => {\n      return responce.json();\n    }).then(result => {\n      if (result.errors) {\n        eror(result);\n      }\n\n      {\n        cbb(result.message);\n      }\n    });\n  }\n\n  if (img) {\n    //изменение названия картинки \n    const blob = img.slice(0, img.size, 'image/png');\n    const newFile = new File([blob], `${date}${img.name}`, {\n      type: 'image/png'\n    });\n    const dataa = new FormData();\n    dataa.append(\"avatar\", newFile);\n    await axios.post(`${url}auth/uploadavatar`, dataa, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  }\n};\n_c = AddUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddUser\");","map":{"version":3,"names":["axios","url","AddUser","objUser","img","cb","cbb","method","date","Date","now","avatar","name","eror","result","errors","map","obj","index","objErr","ref","param","message","msg","phoneNumber","fetch","headers","body","JSON","stringify","then","responce","json","email","blob","slice","size","newFile","File","type","dataa","FormData","append","post"],"sources":["/var/www/netlear/html/clientNetlear/src/components/RegForm/funcReg.js"],"sourcesContent":["import axios from \"axios\";\nimport { url } from \"../../conf\"\nexport const AddUser = async (objUser,img,cb,cbb,method) =>{\n  const date = Date.now()\n\n  if(img){\n    objUser.avatar = `${date}${img.name}`\n  }else{\n    objUser.avatar = \"defaultimg.jpg\"\n  }\n  let eror = (result) =>{\n    result.errors.errors.map((obj,index)=>{\n      const objErr = {}\n      let ref = obj.param\n      let message = obj.msg\n      objErr.message = message\n      objErr.ref = ref\n      cb(objErr)\n    })\n  }\n  if(method == \"email\"){\n    delete objUser.phoneNumber\n    fetch(`${url}auth/registeremail`,{\n      method:\"POST\",\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n      },\n      body: JSON.stringify(objUser)\n    })\n    .then(responce =>{\n      return responce.json()\n    })\n    .then(result => {\n      if(result.errors){eror(result)}\n      {cbb(result.message)}\n    })\n  }else{\n    delete objUser.email\n    fetch(`${url}auth/registerphone`,{\n      method:\"POST\",\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n      },\n      body: JSON.stringify(objUser)\n    })\n    .then(responce =>{\n      return responce.json()\n    })\n    .then(result => {\n      if(result.errors){eror(result)}\n      {cbb(result.message)}\n    })\n  }\n\n  if(img){  \n    //изменение названия картинки \n    const blob = img.slice(0, img.size, 'image/png'); \n    const newFile = new File([blob], `${date}${img.name}`, {type: 'image/png'});\n    const dataa = new FormData()\n\n    dataa.append(\"avatar\", newFile)\n\n    await axios.post(`${url}auth/uploadavatar`,dataa,{\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}