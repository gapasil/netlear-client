{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getOffsets;\n\nvar _index = require(\"../utils/index\");\n/**\n * Takes a parallax element and parses the offset props to get the value\n * and unit. Sets these values as offset object accessible on the element.\n * @param {object} element\n */\n\n\nfunction getOffsets(props) {\n  var y0Prop = props.y0,\n      y1Prop = props.y1,\n      x1Prop = props.x1,\n      x0Prop = props.x0;\n  var y0 = (0, _index.parseValueAndUnit)(y0Prop);\n  var y1 = (0, _index.parseValueAndUnit)(y1Prop);\n  var x0 = (0, _index.parseValueAndUnit)(x0Prop);\n  var x1 = (0, _index.parseValueAndUnit)(x1Prop);\n\n  if (x0.unit !== x1.unit || y0.unit !== y1.unit) {\n    throw new Error('Must provide matching units for the min and max offset values of each axis.');\n  }\n\n  var xUnit = x0.unit || '%';\n  var yUnit = y0.unit || '%';\n  return {\n    xUnit: xUnit,\n    yUnit: yUnit,\n    y0: y0,\n    y1: y1,\n    x0: x0,\n    x1: x1\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","getOffsets","_index","require","props","y0Prop","y0","y1Prop","y1","x1Prop","x1","x0Prop","x0","parseValueAndUnit","unit","Error","xUnit","yUnit"],"sources":["/var/www/netlear/html/clientNetlear/node_modules/react-scroll-parallax/cjs/helpers/getOffsets.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getOffsets;\n\nvar _index = require(\"../utils/index\");\n\n/**\n * Takes a parallax element and parses the offset props to get the value\n * and unit. Sets these values as offset object accessible on the element.\n * @param {object} element\n */\nfunction getOffsets(props) {\n  var y0Prop = props.y0,\n      y1Prop = props.y1,\n      x1Prop = props.x1,\n      x0Prop = props.x0;\n  var y0 = (0, _index.parseValueAndUnit)(y0Prop);\n  var y1 = (0, _index.parseValueAndUnit)(y1Prop);\n  var x0 = (0, _index.parseValueAndUnit)(x0Prop);\n  var x1 = (0, _index.parseValueAndUnit)(x1Prop);\n\n  if (x0.unit !== x1.unit || y0.unit !== y1.unit) {\n    throw new Error('Must provide matching units for the min and max offset values of each axis.');\n  }\n\n  var xUnit = x0.unit || '%';\n  var yUnit = y0.unit || '%';\n  return {\n    xUnit: xUnit,\n    yUnit: yUnit,\n    y0: y0,\n    y1: y1,\n    x0: x0,\n    x1: x1\n  };\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,UAAlB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASF,UAAT,CAAoBG,KAApB,EAA2B;EACzB,IAAIC,MAAM,GAAGD,KAAK,CAACE,EAAnB;EAAA,IACIC,MAAM,GAAGH,KAAK,CAACI,EADnB;EAAA,IAEIC,MAAM,GAAGL,KAAK,CAACM,EAFnB;EAAA,IAGIC,MAAM,GAAGP,KAAK,CAACQ,EAHnB;EAIA,IAAIN,EAAE,GAAG,CAAC,GAAGJ,MAAM,CAACW,iBAAX,EAA8BR,MAA9B,CAAT;EACA,IAAIG,EAAE,GAAG,CAAC,GAAGN,MAAM,CAACW,iBAAX,EAA8BN,MAA9B,CAAT;EACA,IAAIK,EAAE,GAAG,CAAC,GAAGV,MAAM,CAACW,iBAAX,EAA8BF,MAA9B,CAAT;EACA,IAAID,EAAE,GAAG,CAAC,GAAGR,MAAM,CAACW,iBAAX,EAA8BJ,MAA9B,CAAT;;EAEA,IAAIG,EAAE,CAACE,IAAH,KAAYJ,EAAE,CAACI,IAAf,IAAuBR,EAAE,CAACQ,IAAH,KAAYN,EAAE,CAACM,IAA1C,EAAgD;IAC9C,MAAM,IAAIC,KAAJ,CAAU,6EAAV,CAAN;EACD;;EAED,IAAIC,KAAK,GAAGJ,EAAE,CAACE,IAAH,IAAW,GAAvB;EACA,IAAIG,KAAK,GAAGX,EAAE,CAACQ,IAAH,IAAW,GAAvB;EACA,OAAO;IACLE,KAAK,EAAEA,KADF;IAELC,KAAK,EAAEA,KAFF;IAGLX,EAAE,EAAEA,EAHC;IAILE,EAAE,EAAEA,EAJC;IAKLI,EAAE,EAAEA,EALC;IAMLF,EAAE,EAAEA;EANC,CAAP;AAQD"},"metadata":{},"sourceType":"script"}