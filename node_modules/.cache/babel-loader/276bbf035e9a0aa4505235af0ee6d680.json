{"ast":null,"code":"var _jsxFileName = \"/home/gapasil/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438/\\u0434\\u0437/javascript/netlear/clientNetlear/src/components/EventUploadImage/EventUploadImage.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './EventUploadImage.scss';\nimport { Popover } from 'antd';\nimport { FileImageTwoTone } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCourseImg } from '../../redux/actions/UploadingCourse/UploadingCourse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction EventUploadImage(_ref) {\n  _s();\n\n  let {\n    selector,\n    action,\n    popoverContentType,\n    index = 1000\n  } = _ref;\n  const courseFiles = useSelector(state => state.Temp.courseFiles);\n  const ref = React.useRef();\n  const dispatch = useDispatch();\n\n  const onPickUpImage = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    const newAtion = action;\n    const url = reader.readAsDataURL(file);\n    setFileImgForUpload(file, selector, index);\n\n    reader.onloadend = e => {\n      dispatch(newAtion(selector, index, e.target.result));\n    };\n  };\n\n  const setFileImgForUpload = (file, selector, index) => {\n    if (selector === 'promoImg') {\n      const webinarsImgSelector = `webinarsImg${index}`;\n      dispatch(setCourseImg(file, webinarsImgSelector, index));\n    } else if (selector === 'img') {\n      const speakerBlockImgSelector = 'imgSpeaker';\n      dispatch(setCourseImg(file, speakerBlockImgSelector));\n    } else {\n      dispatch(setCourseImg(file, selector));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: index === 1000 ? 'file-input' : index + 'file-input',\n      ref: ref,\n      style: {\n        display: 'none'\n      },\n      type: \"file\",\n      name: \"user[image]\",\n      multiple: false,\n      onChange: onPickUpImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: index === 1000 ? 'file-input' : index + 'file-input',\n      children: /*#__PURE__*/_jsxDEV(Popover, {\n        placement: \"topRight\",\n        content: popoverContentType.content(),\n        title: popoverContentType.title,\n        trigger: \"hover\",\n        children: /*#__PURE__*/_jsxDEV(FileImageTwoTone, {\n          style: {\n            fontSize: '32px',\n            cursor: 'pointer',\n            position: 'absolute',\n            right: '0'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(EventUploadImage, \"VAolK/xgToS/4zwOEAwoylT0Reg=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = EventUploadImage;\nexport default EventUploadImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventUploadImage\");","map":{"version":3,"names":["React","Popover","FileImageTwoTone","useDispatch","useSelector","setCourseImg","EventUploadImage","selector","action","popoverContentType","index","courseFiles","state","Temp","ref","useRef","dispatch","onPickUpImage","e","file","target","files","reader","FileReader","newAtion","url","readAsDataURL","setFileImgForUpload","onloadend","result","webinarsImgSelector","speakerBlockImgSelector","display","content","title","fontSize","cursor","position","right"],"sources":["/home/gapasil/Рабочий стол/Загрузки/дз/javascript/netlear/clientNetlear/src/components/EventUploadImage/EventUploadImage.jsx"],"sourcesContent":["import React from 'react';\nimport './EventUploadImage.scss';\n\nimport { Popover } from 'antd';\nimport { FileImageTwoTone } from '@ant-design/icons';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCourseImg } from '../../redux/actions/UploadingCourse/UploadingCourse';\n\nfunction EventUploadImage({ selector, action, popoverContentType, index = 1000 }) {\n  const courseFiles = useSelector((state) => state.Temp.courseFiles);\n  const ref = React.useRef();\n  const dispatch = useDispatch();\n  \n  const onPickUpImage = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    const newAtion = action;\n    const url = reader.readAsDataURL(file);\n\n    setFileImgForUpload(file, selector, index);\n    reader.onloadend = (e) => {\n      dispatch(newAtion(selector, index, e.target.result));\n    };\n  };\n\n  const setFileImgForUpload = (file, selector, index) => {\n    if (selector === 'promoImg') {\n      const webinarsImgSelector = `webinarsImg${index}`;\n      dispatch(setCourseImg(file, webinarsImgSelector, index));\n    } else if (selector === 'img') {\n      const speakerBlockImgSelector = 'imgSpeaker';\n      dispatch(setCourseImg(file, speakerBlockImgSelector));\n    } else {\n      dispatch(setCourseImg(file, selector));\n    }\n  };\n\n  return (\n    <>\n      <input\n        id={index === 1000 ? 'file-input' : index + 'file-input'}\n        ref={ref}\n        style={{ display: 'none' }}\n        type=\"file\"\n        name=\"user[image]\"\n        multiple={false}\n        onChange={onPickUpImage}\n      />\n\n      <label htmlFor={index === 1000 ? 'file-input' : index + 'file-input'}>\n        <Popover\n          placement=\"topRight\"\n          content={popoverContentType.content()}\n          title={popoverContentType.title}\n          trigger=\"hover\">\n          <FileImageTwoTone\n            style={{ fontSize: '32px', cursor: 'pointer', position: 'absolute', right: '0' }}\n          />\n        </Popover>\n      </label>\n    </>\n  );\n}\n\nexport default EventUploadImage;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;AAEA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,QAA6B,qDAA7B;;;;AAEA,SAASC,gBAAT,OAAkF;EAAA;;EAAA,IAAxD;IAAEC,QAAF;IAAYC,MAAZ;IAAoBC,kBAApB;IAAwCC,KAAK,GAAG;EAAhD,CAAwD;EAChF,MAAMC,WAAW,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,WAAvB,CAA/B;EACA,MAAMG,GAAG,GAAGd,KAAK,CAACe,MAAN,EAAZ;EACA,MAAMC,QAAQ,GAAGb,WAAW,EAA5B;;EAEA,MAAMc,aAAa,GAAIC,CAAD,IAAO;IAC3B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;IACA,MAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;IACA,MAAMC,QAAQ,GAAGhB,MAAjB;IACA,MAAMiB,GAAG,GAAGH,MAAM,CAACI,aAAP,CAAqBP,IAArB,CAAZ;IAEAQ,mBAAmB,CAACR,IAAD,EAAOZ,QAAP,EAAiBG,KAAjB,CAAnB;;IACAY,MAAM,CAACM,SAAP,GAAoBV,CAAD,IAAO;MACxBF,QAAQ,CAACQ,QAAQ,CAACjB,QAAD,EAAWG,KAAX,EAAkBQ,CAAC,CAACE,MAAF,CAASS,MAA3B,CAAT,CAAR;IACD,CAFD;EAGD,CAVD;;EAYA,MAAMF,mBAAmB,GAAG,CAACR,IAAD,EAAOZ,QAAP,EAAiBG,KAAjB,KAA2B;IACrD,IAAIH,QAAQ,KAAK,UAAjB,EAA6B;MAC3B,MAAMuB,mBAAmB,GAAI,cAAapB,KAAM,EAAhD;MACAM,QAAQ,CAACX,YAAY,CAACc,IAAD,EAAOW,mBAAP,EAA4BpB,KAA5B,CAAb,CAAR;IACD,CAHD,MAGO,IAAIH,QAAQ,KAAK,KAAjB,EAAwB;MAC7B,MAAMwB,uBAAuB,GAAG,YAAhC;MACAf,QAAQ,CAACX,YAAY,CAACc,IAAD,EAAOY,uBAAP,CAAb,CAAR;IACD,CAHM,MAGA;MACLf,QAAQ,CAACX,YAAY,CAACc,IAAD,EAAOZ,QAAP,CAAb,CAAR;IACD;EACF,CAVD;;EAYA,oBACE;IAAA,wBACE;MACE,EAAE,EAAEG,KAAK,KAAK,IAAV,GAAiB,YAAjB,GAAgCA,KAAK,GAAG,YAD9C;MAEE,GAAG,EAAEI,GAFP;MAGE,KAAK,EAAE;QAAEkB,OAAO,EAAE;MAAX,CAHT;MAIE,IAAI,EAAC,MAJP;MAKE,IAAI,EAAC,aALP;MAME,QAAQ,EAAE,KANZ;MAOE,QAAQ,EAAEf;IAPZ;MAAA;MAAA;MAAA;IAAA,QADF,eAWE;MAAO,OAAO,EAAEP,KAAK,KAAK,IAAV,GAAiB,YAAjB,GAAgCA,KAAK,GAAG,YAAxD;MAAA,uBACE,QAAC,OAAD;QACE,SAAS,EAAC,UADZ;QAEE,OAAO,EAAED,kBAAkB,CAACwB,OAAnB,EAFX;QAGE,KAAK,EAAExB,kBAAkB,CAACyB,KAH5B;QAIE,OAAO,EAAC,OAJV;QAAA,uBAKE,QAAC,gBAAD;UACE,KAAK,EAAE;YAAEC,QAAQ,EAAE,MAAZ;YAAoBC,MAAM,EAAE,SAA5B;YAAuCC,QAAQ,EAAE,UAAjD;YAA6DC,KAAK,EAAE;UAApE;QADT;UAAA;UAAA;UAAA;QAAA;MALF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAXF;EAAA,gBADF;AAyBD;;GAtDQhC,gB;UACaF,W,EAEHD,W;;;KAHVG,gB;AAwDT,eAAeA,gBAAf"},"metadata":{},"sourceType":"module"}