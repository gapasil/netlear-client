{"ast":null,"code":"import authAPI from'./api';import{setSpinFalse,setSpinTrue}from'../spinner';import{removeLS,getLS,setLS}from'../../../utils/LocalStorage';import{message}from'antd';export var setUserToken=function setUserToken(token){return{type:'SET_USER_TOKEN',token:token};};export var setUserData=function setUserData(data){return{type:'SET_USER_DATA',data:data};};export var setUserAvatar=function setUserAvatar(picture){return{type:'SET_USER_AVATAR',picture:picture};};export var setUserLogout=function setUserLogout(){return{type:'SET_LOGOUT'};};export var fetchSignUp=function fetchSignUp(values){return function(dispatch){var userData={firstName:values.firstName,lastName:values.lastName,email:values.email,password:values.password};authAPI.signUp(userData).then(function(data){// debugger;\n// setLS('EDMED_USER_TOKEN', data.token);\n// dispatch(setUserToken(data.token));\n// console.log(data);\nmessage.success('Письмо с подтверждением выслано на указанный Email');dispatch(setSpinFalse());}).catch(function(error){// debugger;\nif(error.response.status===401){message.error('Данный Email уже зарегистрирован');dispatch(setSpinFalse());}console.log(error);});};};export var fetchAuthorization=function fetchAuthorization(id){return function(dispatch){dispatch(setSpinTrue());authAPI.authorization(id).then(function(data){dispatch(setUserToken(data.token));console.log(data);dispatch(setSpinFalse());}).catch(function(error){return console.log(error);});};};export var fetchAuthMe=function fetchAuthMe(){return function(dispatch){var userToken=getLS('EDMED_USER_TOKEN');dispatch(setSpinTrue());authAPI.authMe().then(function(data){// debugger;\nconsole.log(data);dispatch(setUserData(data));dispatch(setSpinFalse());}).catch(function(error){return console.log(error);});};};export var fetchLogout=function fetchLogout(){return function(dispatch){dispatch(setSpinTrue());authAPI.logout().then(function(data){//   debugger;\nconsole.log(data);dispatch(setUserLogout());removeLS('EDMED_USER_TOKEN');dispatch(setSpinFalse());message.success('Вы успешно покинули сессию');}).catch(function(error){debugger;console.log(error);});};};export var fetchLogIn=function fetchLogIn(data){return function(dispatch){dispatch(setSpinTrue());authAPI.logIn(data).then(function(data){console.log(data);// dispatch(setUserData(data));\ndispatch(setUserToken(data.token));setLS('EDMED_USER_TOKEN',data.token);message.success('Вы успешно авторизовались');dispatch(setSpinFalse());}).catch(function(error){debugger;console.log(error);dispatch(setSpinFalse());});};};//Google reg\n// export const fetchGoogleToken = () => (dispatch) => {\n//   authAPI\n//     .authGoogle()\n//     .then((data) => console.log(data))\n//     .catch((error) => console.log(error));\n// };","map":{"version":3,"names":["authAPI","setSpinFalse","setSpinTrue","removeLS","getLS","setLS","message","setUserToken","token","type","setUserData","data","setUserAvatar","picture","setUserLogout","fetchSignUp","values","dispatch","userData","firstName","lastName","email","password","signUp","then","success","catch","error","response","status","console","log","fetchAuthorization","id","authorization","fetchAuthMe","userToken","authMe","fetchLogout","logout","fetchLogIn","logIn"],"sources":["/var/www/netlear/html/clientNetlear/src/redux/actions/Auth/Auth.js"],"sourcesContent":["import authAPI from './api';\nimport { setSpinFalse, setSpinTrue } from '../spinner';\nimport { removeLS, getLS, setLS } from '../../../utils/LocalStorage';\nimport { message } from 'antd';\n\nexport const setUserToken = (token) => ({\n  type: 'SET_USER_TOKEN',\n  token: token,\n});\n\nexport const setUserData = (data) => ({\n  type: 'SET_USER_DATA',\n  data: data,\n});\n\nexport const setUserAvatar = (picture) => ({\n  type: 'SET_USER_AVATAR',\n  picture: picture,\n});\n\nexport const setUserLogout = () => ({\n  type: 'SET_LOGOUT',\n});\n\nexport const fetchSignUp = (values) => (dispatch) => {\n  const userData = {\n    firstName: values.firstName,\n    lastName: values.lastName,\n    email: values.email,\n    password: values.password,\n  };\n\n  authAPI\n    .signUp(userData)\n    .then((data) => {\n      // debugger;\n      // setLS('EDMED_USER_TOKEN', data.token);\n      // dispatch(setUserToken(data.token));\n      // console.log(data);\n      message.success('Письмо с подтверждением выслано на указанный Email');\n      dispatch(setSpinFalse());\n    })\n    .catch((error) => {\n      // debugger;\n      if (error.response.status === 401) {\n        message.error('Данный Email уже зарегистрирован');\n        dispatch(setSpinFalse());\n      }\n      console.log(error);\n    });\n};\n\nexport const fetchAuthorization = (id) => (dispatch) => {\n  dispatch(setSpinTrue());\n  authAPI\n    .authorization(id)\n    .then((data) => {\n      dispatch(setUserToken(data.token));\n      console.log(data);\n      dispatch(setSpinFalse());\n    })\n    .catch((error) => console.log(error));\n};\n\nexport const fetchAuthMe = () => (dispatch) => {\n  const userToken = getLS('EDMED_USER_TOKEN');\n  dispatch(setSpinTrue());\n  authAPI\n    .authMe()\n    .then((data) => {\n      // debugger;\n      console.log(data);\n      dispatch(setUserData(data));\n      dispatch(setSpinFalse());\n    })\n    .catch((error) => console.log(error));\n};\n\nexport const fetchLogout = () => (dispatch) => {\n  dispatch(setSpinTrue());\n  authAPI\n    .logout()\n    .then((data) => {\n      //   debugger;\n      console.log(data);\n      dispatch(setUserLogout());\n      removeLS('EDMED_USER_TOKEN');\n      dispatch(setSpinFalse());\n      message.success('Вы успешно покинули сессию');\n    })\n    .catch((error) => {\n      debugger;\n      console.log(error);\n    });\n};\n\nexport const fetchLogIn = (data) => (dispatch) => {\n  dispatch(setSpinTrue());\n  authAPI\n    .logIn(data)\n    .then((data) => {\n      console.log(data);\n      // dispatch(setUserData(data));\n      dispatch(setUserToken(data.token));\n      setLS('EDMED_USER_TOKEN', data.token);\n      message.success('Вы успешно авторизовались');\n      dispatch(setSpinFalse());\n    })\n    .catch((error) => {\n      debugger;\n      console.log(error);\n      dispatch(setSpinFalse());\n    });\n};\n\n//Google reg\n\n// export const fetchGoogleToken = () => (dispatch) => {\n//   authAPI\n//     .authGoogle()\n//     .then((data) => console.log(data))\n//     .catch((error) => console.log(error));\n// };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}