{"ast":null,"code":"/*\n | Vimeo-Upload: Upload videos to your Vimeo account directly from a\n |               browser or a Node.js app\n |\n |  _    ___\n | | |  / (_)___ ___  ___  ____\n | | | / / / __ `__ \\/ _ \\/ __ \\   ┌───────────────────────────┐\n | | |/ / / / / / / /  __/ /_/ /   | ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒  %75    |\n | |___/_/_/ /_/ /_/\\___/\\____/    └───────────────────────────┘\n |                      Upload\n |\n |\n | This project was released under Apache 2.0\" license.\n |\n | @link      http://websemantics.ca\n | @author    Web Semantics, Inc. Dev Team <team@websemantics.ca>\n | @author    Adnan M.Sagar, PhD. <adnan@websemantics.ca>\n | @credits   Built on cors-upload-sample, https://github.com/googledrive/cors-upload-sample\n */\n;\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return root.VimeoUpload = factory();\n    });\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    root.VimeoUpload = factory();\n  }\n})(this, function () {\n  // -------------------------------------------------------------------------\n  // RetryHandler Class\n\n  /**\n   * Helper for implementing retries with backoff. Initial retry\n   * delay is 1 second, increasing by 2x (+jitter) for subsequent retries\n   *\n   * @constructor\n   */\n  var RetryHandler = function RetryHandler() {\n    this.interval = 1000; // Start at one second\n\n    this.maxInterval = 60 * 1000; // Don't wait longer than a minute\n  };\n  /**\n   * Invoke the function after waiting\n   *\n   * @param {function} fn Function to invoke\n   */\n\n\n  RetryHandler.prototype.retry = function (fn) {\n    setTimeout(fn, this.interval);\n    this.interval = this.nextInterval_();\n  };\n  /**\n   * Reset the counter (e.g. after successful request)\n   */\n\n\n  RetryHandler.prototype.reset = function () {\n    this.interval = 1000;\n  };\n  /**\n   * Calculate the next wait time.\n   * @return {number} Next wait interval, in milliseconds\n   *\n   * @private\n   */\n\n\n  RetryHandler.prototype.nextInterval_ = function () {\n    var interval = this.interval * 2 + this.getRandomInt_(0, 1000);\n    return Math.min(interval, this.maxInterval);\n  };\n  /**\n   * Get a random int in the range of min to max. Used to add jitter to wait times.\n   *\n   * @param {number} min Lower bounds\n   * @param {number} max Upper bounds\n   * @private\n   */\n\n\n  RetryHandler.prototype.getRandomInt_ = function (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }; // -------------------------------------------------------------------------\n  // Private data\n\n  /* Library defaults, can be changed using the 'defaults' member method,\n   - api_url (string), vimeo api url\n  - name (string), default video name\n  - description (string), default video description\n  - contentType (string), video content type\n  - token (string), vimeo api token\n  - file (object), video file\n  - metadata (array), data to associate with the video\n  - upgrade_to_1080 (boolean), set video resolution to high definition\n  - offset (int),\n  - chunkSize (int),\n  - retryHandler (RetryHandler), hanlder class\n  - onComplete (function), handler for onComplete event\n  - onProgress (function), handler for onProgress event\n  - onError (function), handler for onError event\n   */\n\n\n  var defaults = {\n    api_url: 'https://api.vimeo.com',\n    name: 'Default name',\n    description: 'Default description',\n    contentType: 'application/octet-stream',\n    token: null,\n    file: {},\n    metadata: [],\n    upgrade_to_1080: false,\n    offset: 0,\n    chunkSize: 0,\n    retryHandler: new RetryHandler(),\n    onComplete: function onComplete() {},\n    onProgress: function onProgress() {},\n    onError: function onError() {}\n  };\n  /**\n   * Helper class for resumable uploads using XHR/CORS. Can upload any Blob-like item, whether\n   * files or in-memory constructs.\n   *\n   * @example\n   * var content = new Blob([\"Hello world\"], {\"type\": \"text/plain\"})\n   * var uploader = new VimeoUpload({\n   *   file: content,\n   *   token: accessToken,\n   *   onComplete: function(data) { ... }\n   *   onError: function(data) { ... }\n   * })\n   * uploader.upload()\n   *\n   * @constructor\n   * @param {object} options Hash of options\n   * @param {string} options.token Access token\n   * @param {blob} options.file Blob-like item to upload\n   * @param {string} [options.fileId] ID of file if replacing\n   * @param {object} [options.params] Additional query parameters\n   * @param {string} [options.contentType] Content-type, if overriding the type of the blob.\n   * @param {object} [options.metadata] File metadata\n   * @param {function} [options.onComplete] Callback for when upload is complete\n   * @param {function} [options.onProgress] Callback for status for the in-progress upload\n   * @param {function} [options.onError] Callback if upload fails\n   */\n\n  var me = function me(opts) {\n    /* copy user options or use default values */\n    for (var i in defaults) {\n      this[i] = opts[i] !== undefined ? opts[i] : defaults[i];\n    }\n\n    this.contentType = opts.contentType || this.file.type || defaults.contentType;\n    this.httpMethod = opts.fileId ? 'PUT' : 'POST';\n    this.videoData = {\n      name: opts.name > '' ? opts.name : defaults.name,\n      description: opts.description > '' ? opts.description : defaults.description,\n      'privacy.view': opts.private ? 'nobody' : 'anybody'\n    };\n\n    if (!(this.url = opts.url)) {\n      var params = opts.params || {};\n      /*  TODO params.uploadType = 'resumable' */\n\n      this.url = this.buildUrl_(opts.fileId, params, opts.baseUrl);\n    }\n  }; // -------------------------------------------------------------------------\n  // Public methods\n\n  /*\n    Override class defaults\n       Parameters:\n      - opts (object): name value pairs\n   */\n\n\n  me.prototype.defaults = function (opts) {\n    return defaults;\n    /* TODO $.extend(true, defaults, opts) */\n  };\n  /**\n   * Initiate the upload (Get vimeo ticket number and upload url)\n   */\n\n\n  me.prototype.upload = function () {\n    var xhr = new XMLHttpRequest();\n    xhr.open(this.httpMethod, this.url, true);\n    xhr.setRequestHeader('Authorization', 'Bearer ' + this.token);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    xhr.onload = function (e) {\n      // get vimeo upload  url, user (for available quote), ticket id and complete url\n      if (e.target.status < 400) {\n        var response = JSON.parse(e.target.responseText);\n        this.url = response.upload_link_secure;\n        this.user = response.user;\n        this.ticket_id = response.ticket_id;\n        this.complete_url = defaults.api_url + response.complete_uri;\n        this.sendFile_();\n      } else {\n        this.onUploadError_(e);\n      }\n    }.bind(this);\n\n    xhr.onerror = this.onUploadError_.bind(this);\n    xhr.send(JSON.stringify({\n      type: 'streaming',\n      upgrade_to_1080: this.upgrade_to_1080\n    }));\n  }; // -------------------------------------------------------------------------\n  // Private methods\n\n  /**\n   * Send the actual file content.\n   *\n   * @private\n   */\n\n\n  me.prototype.sendFile_ = function () {\n    var content = this.file;\n    var end = this.file.size;\n\n    if (this.offset || this.chunkSize) {\n      // Only bother to slice the file if we're either resuming or uploading in chunks\n      if (this.chunkSize) {\n        end = Math.min(this.offset + this.chunkSize, this.file.size);\n      }\n\n      content = content.slice(this.offset, end);\n    }\n\n    var xhr = new XMLHttpRequest();\n    xhr.open('PUT', this.url, true);\n    xhr.setRequestHeader('Content-Type', this.contentType); // xhr.setRequestHeader('Content-Length', this.file.size)\n\n    xhr.setRequestHeader('Content-Range', 'bytes ' + this.offset + '-' + (end - 1) + '/' + this.file.size);\n\n    if (xhr.upload) {\n      xhr.upload.addEventListener('progress', this.onProgress);\n    }\n\n    xhr.onload = this.onContentUploadSuccess_.bind(this);\n    xhr.onerror = this.onContentUploadError_.bind(this);\n    xhr.send(content);\n  };\n  /**\n   * Query for the state of the file for resumption.\n   *\n   * @private\n   */\n\n\n  me.prototype.resume_ = function () {\n    var xhr = new XMLHttpRequest();\n    xhr.open('PUT', this.url, true);\n    xhr.setRequestHeader('Content-Range', 'bytes */' + this.file.size);\n    xhr.setRequestHeader('X-Upload-Content-Type', this.file.type);\n\n    if (xhr.upload) {\n      xhr.upload.addEventListener('progress', this.onProgress);\n    }\n\n    xhr.onload = this.onContentUploadSuccess_.bind(this);\n    xhr.onerror = this.onContentUploadError_.bind(this);\n    xhr.send();\n  };\n  /**\n   * Extract the last saved range if available in the request.\n   *\n   * @param {XMLHttpRequest} xhr Request object\n   */\n\n\n  me.prototype.extractRange_ = function (xhr) {\n    var range = xhr.getResponseHeader('Range');\n\n    if (range) {\n      this.offset = parseInt(range.match(/\\d+/g).pop(), 10) + 1;\n    }\n  };\n  /**\n   * The final step is to call vimeo.videos.upload.complete to queue up\n   * the video for transcoding.\n   *\n   * If successful call 'onUpdateVideoData_'\n   *\n   * @private\n   */\n\n\n  me.prototype.complete_ = function (xhr) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('DELETE', this.complete_url, true);\n    xhr.setRequestHeader('Authorization', 'Bearer ' + this.token);\n\n    xhr.onload = function (e) {\n      // Get the video location (videoId)\n      if (e.target.status < 400) {\n        var location = e.target.getResponseHeader('Location'); // Example of location: ' /videos/115365719', extract the video id only\n\n        var video_id = location.split('/').pop(); // Update the video metadata\n\n        this.onUpdateVideoData_(video_id);\n      } else {\n        this.onCompleteError_(e);\n      }\n    }.bind(this);\n\n    xhr.onerror = this.onCompleteError_.bind(this);\n    xhr.send();\n  };\n  /**\n   * Update the Video Data and add the metadata to the upload object\n   *\n   * @private\n   * @param {string} [id] Video Id\n   */\n\n\n  me.prototype.onUpdateVideoData_ = function (video_id) {\n    var url = this.buildUrl_(video_id, [], defaults.api_url + '/videos/');\n    var httpMethod = 'PATCH';\n    var xhr = new XMLHttpRequest();\n    xhr.open(httpMethod, url, true);\n    xhr.setRequestHeader('Authorization', 'Bearer ' + this.token);\n\n    xhr.onload = function (e) {\n      // add the metadata\n      this.onGetMetadata_(e, video_id);\n    }.bind(this);\n\n    xhr.send(this.buildQuery_(this.videoData));\n  };\n  /**\n   * Retrieve the metadata from a successful onUpdateVideoData_ response\n   * This is is useful when uploading unlisted videos as the URI has changed.\n   *\n   * If successful call 'onUpdateVideoData_'\n   *\n   * @private\n   * @param {object} e XHR event\n   * @param {string} [id] Video Id\n   */\n\n\n  me.prototype.onGetMetadata_ = function (e, video_id) {\n    // Get the video location (videoId)\n    if (e.target.status < 400) {\n      if (e.target.response) {\n        // add the returned metadata to the metadata array\n        var meta = JSON.parse(e.target.response); // get the new index of the item\n\n        var index = this.metadata.push(meta) - 1; // call the complete method\n\n        this.onComplete(video_id, index);\n      } else {\n        this.onCompleteError_(e);\n      }\n    }\n  };\n  /**\n   * Handle successful responses for uploads. Depending on the context,\n   * may continue with uploading the next chunk of the file or, if complete,\n   * invokes vimeo complete service.\n   *\n   * @private\n   * @param {object} e XHR event\n   */\n\n\n  me.prototype.onContentUploadSuccess_ = function (e) {\n    if (e.target.status == 200 || e.target.status == 201) {\n      this.complete_();\n    } else if (e.target.status == 308) {\n      this.extractRange_(e.target);\n      this.retryHandler.reset();\n      this.sendFile_();\n    }\n  };\n  /**\n   * Handles errors for uploads. Either retries or aborts depending\n   * on the error.\n   *\n   * @private\n   * @param {object} e XHR event\n   */\n\n\n  me.prototype.onContentUploadError_ = function (e) {\n    if (e.target.status && e.target.status < 500) {\n      this.onError(e.target.response);\n    } else {\n      this.retryHandler.retry(this.resume_());\n    }\n  };\n  /**\n   * Handles errors for the complete request.\n   *\n   * @private\n   * @param {object} e XHR event\n   */\n\n\n  me.prototype.onCompleteError_ = function (e) {\n    this.onError(e.target.response); // TODO - Retries for initial upload\n  };\n  /**\n   * Handles errors for the initial request.\n   *\n   * @private\n   * @param {object} e XHR event\n   */\n\n\n  me.prototype.onUploadError_ = function (e) {\n    this.onError(e.target.response); // TODO - Retries for initial upload\n  };\n  /**\n   * Construct a query string from a hash/object\n   *\n   * @private\n   * @param {object} [params] Key/value pairs for query string\n   * @return {string} query string\n   */\n\n\n  me.prototype.buildQuery_ = function (params) {\n    params = params || {};\n    return Object.keys(params).map(function (key) {\n      return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\n    }).join('&');\n  };\n  /**\n   * Build the drive upload URL\n   *\n   * @private\n   * @param {string} [id] File ID if replacing\n   * @param {object} [params] Query parameters\n   * @return {string} URL\n   */\n\n\n  me.prototype.buildUrl_ = function (id, params, baseUrl) {\n    var url = baseUrl || defaults.api_url + '/me/videos';\n\n    if (id) {\n      url += id;\n    }\n\n    var query = this.buildQuery_(params);\n\n    if (query) {\n      url += '?' + query;\n    }\n\n    return url;\n  };\n\n  return me;\n});","map":{"version":3,"names":["root","factory","define","amd","VimeoUpload","module","exports","RetryHandler","interval","maxInterval","prototype","retry","fn","setTimeout","nextInterval_","reset","getRandomInt_","Math","min","max","floor","random","defaults","api_url","name","description","contentType","token","file","metadata","upgrade_to_1080","offset","chunkSize","retryHandler","onComplete","onProgress","onError","me","opts","i","undefined","type","httpMethod","fileId","videoData","private","url","params","buildUrl_","baseUrl","upload","xhr","XMLHttpRequest","open","setRequestHeader","onload","e","target","status","response","JSON","parse","responseText","upload_link_secure","user","ticket_id","complete_url","complete_uri","sendFile_","onUploadError_","bind","onerror","send","stringify","content","end","size","slice","addEventListener","onContentUploadSuccess_","onContentUploadError_","resume_","extractRange_","range","getResponseHeader","parseInt","match","pop","complete_","location","video_id","split","onUpdateVideoData_","onCompleteError_","onGetMetadata_","buildQuery_","meta","index","push","Object","keys","map","key","encodeURIComponent","join","id","query"],"sources":["/var/www/netlear/html/clientNetlear/node_modules/vimeo-upload/vimeo-upload.js"],"sourcesContent":["/*\n | Vimeo-Upload: Upload videos to your Vimeo account directly from a\n |               browser or a Node.js app\n |\n |  _    ___\n | | |  / (_)___ ___  ___  ____\n | | | / / / __ `__ \\/ _ \\/ __ \\   ┌───────────────────────────┐\n | | |/ / / / / / / /  __/ /_/ /   | ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒  %75    |\n | |___/_/_/ /_/ /_/\\___/\\____/    └───────────────────────────┘\n |                      Upload\n |\n |\n | This project was released under Apache 2.0\" license.\n |\n | @link      http://websemantics.ca\n | @author    Web Semantics, Inc. Dev Team <team@websemantics.ca>\n | @author    Adnan M.Sagar, PhD. <adnan@websemantics.ca>\n | @credits   Built on cors-upload-sample, https://github.com/googledrive/cors-upload-sample\n */\n\n;\n(function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], function() {\n            return (root.VimeoUpload = factory())\n        })\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory()\n    } else {\n        root.VimeoUpload = factory()\n    }\n}(this, function() {\n\n    // -------------------------------------------------------------------------\n    // RetryHandler Class\n\n    /**\n     * Helper for implementing retries with backoff. Initial retry\n     * delay is 1 second, increasing by 2x (+jitter) for subsequent retries\n     *\n     * @constructor\n     */\n    var RetryHandler = function() {\n        this.interval = 1000 // Start at one second\n        this.maxInterval = 60 * 1000; // Don't wait longer than a minute\n    }\n\n    /**\n     * Invoke the function after waiting\n     *\n     * @param {function} fn Function to invoke\n     */\n    RetryHandler.prototype.retry = function(fn) {\n        setTimeout(fn, this.interval)\n        this.interval = this.nextInterval_()\n    }\n\n    /**\n     * Reset the counter (e.g. after successful request)\n     */\n    RetryHandler.prototype.reset = function() {\n        this.interval = 1000\n    }\n\n    /**\n     * Calculate the next wait time.\n     * @return {number} Next wait interval, in milliseconds\n     *\n     * @private\n     */\n    RetryHandler.prototype.nextInterval_ = function() {\n        var interval = this.interval * 2 + this.getRandomInt_(0, 1000)\n        return Math.min(interval, this.maxInterval)\n    }\n\n    /**\n     * Get a random int in the range of min to max. Used to add jitter to wait times.\n     *\n     * @param {number} min Lower bounds\n     * @param {number} max Upper bounds\n     * @private\n     */\n    RetryHandler.prototype.getRandomInt_ = function(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min)\n    }\n\n    // -------------------------------------------------------------------------\n    // Private data\n\n    /* Library defaults, can be changed using the 'defaults' member method,\n\n    - api_url (string), vimeo api url\n    - name (string), default video name\n    - description (string), default video description\n    - contentType (string), video content type\n    - token (string), vimeo api token\n    - file (object), video file\n    - metadata (array), data to associate with the video\n    - upgrade_to_1080 (boolean), set video resolution to high definition\n    - offset (int),\n    - chunkSize (int),\n    - retryHandler (RetryHandler), hanlder class\n    - onComplete (function), handler for onComplete event\n    - onProgress (function), handler for onProgress event\n    - onError (function), handler for onError event\n\n    */\n\n    var defaults = {\n        api_url: 'https://api.vimeo.com',\n        name: 'Default name',\n        description: 'Default description',\n        contentType: 'application/octet-stream',\n        token: null,\n        file: {},\n        metadata: [],\n        upgrade_to_1080: false,\n        offset: 0,\n        chunkSize: 0,\n        retryHandler: new RetryHandler(),\n        onComplete: function() {},\n        onProgress: function() {},\n        onError: function() {}\n    }\n\n    /**\n     * Helper class for resumable uploads using XHR/CORS. Can upload any Blob-like item, whether\n     * files or in-memory constructs.\n     *\n     * @example\n     * var content = new Blob([\"Hello world\"], {\"type\": \"text/plain\"})\n     * var uploader = new VimeoUpload({\n     *   file: content,\n     *   token: accessToken,\n     *   onComplete: function(data) { ... }\n     *   onError: function(data) { ... }\n     * })\n     * uploader.upload()\n     *\n     * @constructor\n     * @param {object} options Hash of options\n     * @param {string} options.token Access token\n     * @param {blob} options.file Blob-like item to upload\n     * @param {string} [options.fileId] ID of file if replacing\n     * @param {object} [options.params] Additional query parameters\n     * @param {string} [options.contentType] Content-type, if overriding the type of the blob.\n     * @param {object} [options.metadata] File metadata\n     * @param {function} [options.onComplete] Callback for when upload is complete\n     * @param {function} [options.onProgress] Callback for status for the in-progress upload\n     * @param {function} [options.onError] Callback if upload fails\n     */\n    var me = function(opts) {\n\n        /* copy user options or use default values */\n        for (var i in defaults) {\n            this[i] = (opts[i] !== undefined) ? opts[i] : defaults[i]\n        }\n\n        this.contentType = opts.contentType || this.file.type || defaults.contentType\n        this.httpMethod = opts.fileId ? 'PUT' : 'POST'\n\n        this.videoData = {\n            name: (opts.name > '') ? opts.name : defaults.name,\n            description: (opts.description > '') ? opts.description : defaults.description,\n            'privacy.view': opts.private ? 'nobody' : 'anybody'\n        }\n\n        if (!(this.url = opts.url)) {\n            var params = opts.params || {} /*  TODO params.uploadType = 'resumable' */\n            this.url = this.buildUrl_(opts.fileId, params, opts.baseUrl)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public methods\n\n    /*\n      Override class defaults\n\n        Parameters:\n        - opts (object): name value pairs\n\n    */\n\n    me.prototype.defaults = function(opts) {\n        return defaults /* TODO $.extend(true, defaults, opts) */\n    }\n\n    /**\n     * Initiate the upload (Get vimeo ticket number and upload url)\n     */\n    me.prototype.upload = function() {\n        var xhr = new XMLHttpRequest()\n        xhr.open(this.httpMethod, this.url, true)\n        xhr.setRequestHeader('Authorization', 'Bearer ' + this.token)\n        xhr.setRequestHeader('Content-Type', 'application/json')\n\n        xhr.onload = function(e) {\n            // get vimeo upload  url, user (for available quote), ticket id and complete url\n            if (e.target.status < 400) {\n                var response = JSON.parse(e.target.responseText)\n                this.url = response.upload_link_secure\n                this.user = response.user\n                this.ticket_id = response.ticket_id\n                this.complete_url = defaults.api_url + response.complete_uri\n                this.sendFile_()\n            } else {\n                this.onUploadError_(e)\n            }\n        }.bind(this)\n\n        xhr.onerror = this.onUploadError_.bind(this)\n        xhr.send(JSON.stringify({\n            type: 'streaming',\n            upgrade_to_1080: this.upgrade_to_1080\n        }))\n    }\n\n    // -------------------------------------------------------------------------\n    // Private methods\n\n    /**\n     * Send the actual file content.\n     *\n     * @private\n     */\n    me.prototype.sendFile_ = function() {\n        var content = this.file\n        var end = this.file.size\n\n        if (this.offset || this.chunkSize) {\n            // Only bother to slice the file if we're either resuming or uploading in chunks\n            if (this.chunkSize) {\n                end = Math.min(this.offset + this.chunkSize, this.file.size)\n            }\n            content = content.slice(this.offset, end)\n        }\n\n        var xhr = new XMLHttpRequest()\n        xhr.open('PUT', this.url, true)\n        xhr.setRequestHeader('Content-Type', this.contentType)\n            // xhr.setRequestHeader('Content-Length', this.file.size)\n        xhr.setRequestHeader('Content-Range', 'bytes ' + this.offset + '-' + (end - 1) + '/' + this.file.size)\n\n        if (xhr.upload) {\n            xhr.upload.addEventListener('progress', this.onProgress)\n        }\n        xhr.onload = this.onContentUploadSuccess_.bind(this)\n        xhr.onerror = this.onContentUploadError_.bind(this)\n        xhr.send(content)\n    }\n\n    /**\n     * Query for the state of the file for resumption.\n     *\n     * @private\n     */\n    me.prototype.resume_ = function() {\n        var xhr = new XMLHttpRequest()\n        xhr.open('PUT', this.url, true)\n        xhr.setRequestHeader('Content-Range', 'bytes */' + this.file.size)\n        xhr.setRequestHeader('X-Upload-Content-Type', this.file.type)\n        if (xhr.upload) {\n            xhr.upload.addEventListener('progress', this.onProgress)\n        }\n        xhr.onload = this.onContentUploadSuccess_.bind(this)\n        xhr.onerror = this.onContentUploadError_.bind(this)\n        xhr.send()\n    }\n\n    /**\n     * Extract the last saved range if available in the request.\n     *\n     * @param {XMLHttpRequest} xhr Request object\n     */\n    me.prototype.extractRange_ = function(xhr) {\n        var range = xhr.getResponseHeader('Range')\n        if (range) {\n            this.offset = parseInt(range.match(/\\d+/g).pop(), 10) + 1\n        }\n    }\n\n    /**\n     * The final step is to call vimeo.videos.upload.complete to queue up\n     * the video for transcoding.\n     *\n     * If successful call 'onUpdateVideoData_'\n     *\n     * @private\n     */\n    me.prototype.complete_ = function(xhr) {\n        var xhr = new XMLHttpRequest()\n        xhr.open('DELETE', this.complete_url, true)\n        xhr.setRequestHeader('Authorization', 'Bearer ' + this.token)\n\n        xhr.onload = function(e) {\n\n            // Get the video location (videoId)\n            if (e.target.status < 400) {\n                var location = e.target.getResponseHeader('Location')\n\n                // Example of location: ' /videos/115365719', extract the video id only\n                var video_id = location.split('/').pop()\n                    // Update the video metadata\n                this.onUpdateVideoData_(video_id)\n            } else {\n                this.onCompleteError_(e)\n            }\n        }.bind(this)\n\n        xhr.onerror = this.onCompleteError_.bind(this)\n        xhr.send()\n    }\n\n    /**\n     * Update the Video Data and add the metadata to the upload object\n     *\n     * @private\n     * @param {string} [id] Video Id\n     */\n    me.prototype.onUpdateVideoData_ = function(video_id) {\n        var url = this.buildUrl_(video_id, [], defaults.api_url + '/videos/')\n        var httpMethod = 'PATCH'\n        var xhr = new XMLHttpRequest()\n\n        xhr.open(httpMethod, url, true)\n        xhr.setRequestHeader('Authorization', 'Bearer ' + this.token)\n        xhr.onload = function(e) {\n            // add the metadata\n            this.onGetMetadata_(e, video_id)\n        }.bind(this)\n        xhr.send(this.buildQuery_(this.videoData))\n    }\n\n    /**\n     * Retrieve the metadata from a successful onUpdateVideoData_ response\n     * This is is useful when uploading unlisted videos as the URI has changed.\n     *\n     * If successful call 'onUpdateVideoData_'\n     *\n     * @private\n     * @param {object} e XHR event\n     * @param {string} [id] Video Id\n     */\n    me.prototype.onGetMetadata_ = function(e, video_id) {\n        // Get the video location (videoId)\n        if (e.target.status < 400) {\n            if (e.target.response) {\n                // add the returned metadata to the metadata array\n                var meta = JSON.parse(e.target.response)\n                    // get the new index of the item\n                var index = this.metadata.push(meta) - 1\n                    // call the complete method\n                this.onComplete(video_id, index)\n            } else {\n                this.onCompleteError_(e)\n            }\n        }\n    }\n\n    /**\n     * Handle successful responses for uploads. Depending on the context,\n     * may continue with uploading the next chunk of the file or, if complete,\n     * invokes vimeo complete service.\n     *\n     * @private\n     * @param {object} e XHR event\n     */\n    me.prototype.onContentUploadSuccess_ = function(e) {\n        if (e.target.status == 200 || e.target.status == 201) {\n            this.complete_()\n        } else if (e.target.status == 308) {\n            this.extractRange_(e.target)\n            this.retryHandler.reset()\n            this.sendFile_()\n        }\n    }\n\n    /**\n     * Handles errors for uploads. Either retries or aborts depending\n     * on the error.\n     *\n     * @private\n     * @param {object} e XHR event\n     */\n    me.prototype.onContentUploadError_ = function(e) {\n        if (e.target.status && e.target.status < 500) {\n            this.onError(e.target.response)\n        } else {\n            this.retryHandler.retry(this.resume_())\n        }\n    }\n\n    /**\n     * Handles errors for the complete request.\n     *\n     * @private\n     * @param {object} e XHR event\n     */\n    me.prototype.onCompleteError_ = function(e) {\n        this.onError(e.target.response); // TODO - Retries for initial upload\n    }\n\n    /**\n     * Handles errors for the initial request.\n     *\n     * @private\n     * @param {object} e XHR event\n     */\n    me.prototype.onUploadError_ = function(e) {\n        this.onError(e.target.response); // TODO - Retries for initial upload\n    }\n\n    /**\n     * Construct a query string from a hash/object\n     *\n     * @private\n     * @param {object} [params] Key/value pairs for query string\n     * @return {string} query string\n     */\n    me.prototype.buildQuery_ = function(params) {\n        params = params || {}\n        return Object.keys(params).map(function(key) {\n            return encodeURIComponent(key) + '=' + encodeURIComponent(params[key])\n        }).join('&')\n    }\n\n    /**\n     * Build the drive upload URL\n     *\n     * @private\n     * @param {string} [id] File ID if replacing\n     * @param {object} [params] Query parameters\n     * @return {string} URL\n     */\n    me.prototype.buildUrl_ = function(id, params, baseUrl) {\n        var url = baseUrl || defaults.api_url + '/me/videos'\n        if (id) {\n            url += id\n        }\n        var query = this.buildQuery_(params)\n        if (query) {\n            url += '?' + query\n        }\n        return url\n    }\n\n    return me\n}))\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACC,WAASA,IAAT,EAAeC,OAAf,EAAwB;EACrB,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;IAC5CD,MAAM,CAAC,EAAD,EAAK,YAAW;MAClB,OAAQF,IAAI,CAACI,WAAL,GAAmBH,OAAO,EAAlC;IACH,CAFK,CAAN;EAGH,CAJD,MAIO,IAAI,OAAOI,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,OAAzC,EAAkD;IACrDD,MAAM,CAACC,OAAP,GAAiBL,OAAO,EAAxB;EACH,CAFM,MAEA;IACHD,IAAI,CAACI,WAAL,GAAmBH,OAAO,EAA1B;EACH;AACJ,CAVA,EAUC,IAVD,EAUO,YAAW;EAEf;EACA;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIM,YAAY,GAAG,SAAfA,YAAe,GAAW;IAC1B,KAAKC,QAAL,GAAgB,IAAhB,CAD0B,CACL;;IACrB,KAAKC,WAAL,GAAmB,KAAK,IAAxB,CAF0B,CAEI;EACjC,CAHD;EAKA;AACJ;AACA;AACA;AACA;;;EACIF,YAAY,CAACG,SAAb,CAAuBC,KAAvB,GAA+B,UAASC,EAAT,EAAa;IACxCC,UAAU,CAACD,EAAD,EAAK,KAAKJ,QAAV,CAAV;IACA,KAAKA,QAAL,GAAgB,KAAKM,aAAL,EAAhB;EACH,CAHD;EAKA;AACJ;AACA;;;EACIP,YAAY,CAACG,SAAb,CAAuBK,KAAvB,GAA+B,YAAW;IACtC,KAAKP,QAAL,GAAgB,IAAhB;EACH,CAFD;EAIA;AACJ;AACA;AACA;AACA;AACA;;;EACID,YAAY,CAACG,SAAb,CAAuBI,aAAvB,GAAuC,YAAW;IAC9C,IAAIN,QAAQ,GAAG,KAAKA,QAAL,GAAgB,CAAhB,GAAoB,KAAKQ,aAAL,CAAmB,CAAnB,EAAsB,IAAtB,CAAnC;IACA,OAAOC,IAAI,CAACC,GAAL,CAASV,QAAT,EAAmB,KAAKC,WAAxB,CAAP;EACH,CAHD;EAKA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIF,YAAY,CAACG,SAAb,CAAuBM,aAAvB,GAAuC,UAASE,GAAT,EAAcC,GAAd,EAAmB;IACtD,OAAOF,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACI,MAAL,MAAiBF,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;EACH,CAFD,CAnDe,CAuDf;EACA;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAII,IAAII,QAAQ,GAAG;IACXC,OAAO,EAAE,uBADE;IAEXC,IAAI,EAAE,cAFK;IAGXC,WAAW,EAAE,qBAHF;IAIXC,WAAW,EAAE,0BAJF;IAKXC,KAAK,EAAE,IALI;IAMXC,IAAI,EAAE,EANK;IAOXC,QAAQ,EAAE,EAPC;IAQXC,eAAe,EAAE,KARN;IASXC,MAAM,EAAE,CATG;IAUXC,SAAS,EAAE,CAVA;IAWXC,YAAY,EAAE,IAAI1B,YAAJ,EAXH;IAYX2B,UAAU,EAAE,sBAAW,CAAE,CAZd;IAaXC,UAAU,EAAE,sBAAW,CAAE,CAbd;IAcXC,OAAO,EAAE,mBAAW,CAAE;EAdX,CAAf;EAiBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,IAAIC,EAAE,GAAG,SAALA,EAAK,CAASC,IAAT,EAAe;IAEpB;IACA,KAAK,IAAIC,CAAT,IAAcjB,QAAd,EAAwB;MACpB,KAAKiB,CAAL,IAAWD,IAAI,CAACC,CAAD,CAAJ,KAAYC,SAAb,GAA0BF,IAAI,CAACC,CAAD,CAA9B,GAAoCjB,QAAQ,CAACiB,CAAD,CAAtD;IACH;;IAED,KAAKb,WAAL,GAAmBY,IAAI,CAACZ,WAAL,IAAoB,KAAKE,IAAL,CAAUa,IAA9B,IAAsCnB,QAAQ,CAACI,WAAlE;IACA,KAAKgB,UAAL,GAAkBJ,IAAI,CAACK,MAAL,GAAc,KAAd,GAAsB,MAAxC;IAEA,KAAKC,SAAL,GAAiB;MACbpB,IAAI,EAAGc,IAAI,CAACd,IAAL,GAAY,EAAb,GAAmBc,IAAI,CAACd,IAAxB,GAA+BF,QAAQ,CAACE,IADjC;MAEbC,WAAW,EAAGa,IAAI,CAACb,WAAL,GAAmB,EAApB,GAA0Ba,IAAI,CAACb,WAA/B,GAA6CH,QAAQ,CAACG,WAFtD;MAGb,gBAAgBa,IAAI,CAACO,OAAL,GAAe,QAAf,GAA0B;IAH7B,CAAjB;;IAMA,IAAI,EAAE,KAAKC,GAAL,GAAWR,IAAI,CAACQ,GAAlB,CAAJ,EAA4B;MACxB,IAAIC,MAAM,GAAGT,IAAI,CAACS,MAAL,IAAe,EAA5B;MAA+B;;MAC/B,KAAKD,GAAL,GAAW,KAAKE,SAAL,CAAeV,IAAI,CAACK,MAApB,EAA4BI,MAA5B,EAAoCT,IAAI,CAACW,OAAzC,CAAX;IACH;EACJ,CApBD,CAxHe,CA8If;EACA;;EAEA;AACJ;AACA;AACA;AACA;;;EAIIZ,EAAE,CAAC3B,SAAH,CAAaY,QAAb,GAAwB,UAASgB,IAAT,EAAe;IACnC,OAAOhB,QAAP;IAAgB;EACnB,CAFD;EAIA;AACJ;AACA;;;EACIe,EAAE,CAAC3B,SAAH,CAAawC,MAAb,GAAsB,YAAW;IAC7B,IAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;IACAD,GAAG,CAACE,IAAJ,CAAS,KAAKX,UAAd,EAA0B,KAAKI,GAA/B,EAAoC,IAApC;IACAK,GAAG,CAACG,gBAAJ,CAAqB,eAArB,EAAsC,YAAY,KAAK3B,KAAvD;IACAwB,GAAG,CAACG,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;;IAEAH,GAAG,CAACI,MAAJ,GAAa,UAASC,CAAT,EAAY;MACrB;MACA,IAAIA,CAAC,CAACC,MAAF,CAASC,MAAT,GAAkB,GAAtB,EAA2B;QACvB,IAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWL,CAAC,CAACC,MAAF,CAASK,YAApB,CAAf;QACA,KAAKhB,GAAL,GAAWa,QAAQ,CAACI,kBAApB;QACA,KAAKC,IAAL,GAAYL,QAAQ,CAACK,IAArB;QACA,KAAKC,SAAL,GAAiBN,QAAQ,CAACM,SAA1B;QACA,KAAKC,YAAL,GAAoB5C,QAAQ,CAACC,OAAT,GAAmBoC,QAAQ,CAACQ,YAAhD;QACA,KAAKC,SAAL;MACH,CAPD,MAOO;QACH,KAAKC,cAAL,CAAoBb,CAApB;MACH;IACJ,CAZY,CAYXc,IAZW,CAYN,IAZM,CAAb;;IAcAnB,GAAG,CAACoB,OAAJ,GAAc,KAAKF,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAd;IACAnB,GAAG,CAACqB,IAAJ,CAASZ,IAAI,CAACa,SAAL,CAAe;MACpBhC,IAAI,EAAE,WADc;MAEpBX,eAAe,EAAE,KAAKA;IAFF,CAAf,CAAT;EAIH,CAzBD,CAhKe,CA2Lf;EACA;;EAEA;AACJ;AACA;AACA;AACA;;;EACIO,EAAE,CAAC3B,SAAH,CAAa0D,SAAb,GAAyB,YAAW;IAChC,IAAIM,OAAO,GAAG,KAAK9C,IAAnB;IACA,IAAI+C,GAAG,GAAG,KAAK/C,IAAL,CAAUgD,IAApB;;IAEA,IAAI,KAAK7C,MAAL,IAAe,KAAKC,SAAxB,EAAmC;MAC/B;MACA,IAAI,KAAKA,SAAT,EAAoB;QAChB2C,GAAG,GAAG1D,IAAI,CAACC,GAAL,CAAS,KAAKa,MAAL,GAAc,KAAKC,SAA5B,EAAuC,KAAKJ,IAAL,CAAUgD,IAAjD,CAAN;MACH;;MACDF,OAAO,GAAGA,OAAO,CAACG,KAAR,CAAc,KAAK9C,MAAnB,EAA2B4C,GAA3B,CAAV;IACH;;IAED,IAAIxB,GAAG,GAAG,IAAIC,cAAJ,EAAV;IACAD,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgB,KAAKP,GAArB,EAA0B,IAA1B;IACAK,GAAG,CAACG,gBAAJ,CAAqB,cAArB,EAAqC,KAAK5B,WAA1C,EAdgC,CAe5B;;IACJyB,GAAG,CAACG,gBAAJ,CAAqB,eAArB,EAAsC,WAAW,KAAKvB,MAAhB,GAAyB,GAAzB,IAAgC4C,GAAG,GAAG,CAAtC,IAA2C,GAA3C,GAAiD,KAAK/C,IAAL,CAAUgD,IAAjG;;IAEA,IAAIzB,GAAG,CAACD,MAAR,EAAgB;MACZC,GAAG,CAACD,MAAJ,CAAW4B,gBAAX,CAA4B,UAA5B,EAAwC,KAAK3C,UAA7C;IACH;;IACDgB,GAAG,CAACI,MAAJ,GAAa,KAAKwB,uBAAL,CAA6BT,IAA7B,CAAkC,IAAlC,CAAb;IACAnB,GAAG,CAACoB,OAAJ,GAAc,KAAKS,qBAAL,CAA2BV,IAA3B,CAAgC,IAAhC,CAAd;IACAnB,GAAG,CAACqB,IAAJ,CAASE,OAAT;EACH,CAxBD;EA0BA;AACJ;AACA;AACA;AACA;;;EACIrC,EAAE,CAAC3B,SAAH,CAAauE,OAAb,GAAuB,YAAW;IAC9B,IAAI9B,GAAG,GAAG,IAAIC,cAAJ,EAAV;IACAD,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgB,KAAKP,GAArB,EAA0B,IAA1B;IACAK,GAAG,CAACG,gBAAJ,CAAqB,eAArB,EAAsC,aAAa,KAAK1B,IAAL,CAAUgD,IAA7D;IACAzB,GAAG,CAACG,gBAAJ,CAAqB,uBAArB,EAA8C,KAAK1B,IAAL,CAAUa,IAAxD;;IACA,IAAIU,GAAG,CAACD,MAAR,EAAgB;MACZC,GAAG,CAACD,MAAJ,CAAW4B,gBAAX,CAA4B,UAA5B,EAAwC,KAAK3C,UAA7C;IACH;;IACDgB,GAAG,CAACI,MAAJ,GAAa,KAAKwB,uBAAL,CAA6BT,IAA7B,CAAkC,IAAlC,CAAb;IACAnB,GAAG,CAACoB,OAAJ,GAAc,KAAKS,qBAAL,CAA2BV,IAA3B,CAAgC,IAAhC,CAAd;IACAnB,GAAG,CAACqB,IAAJ;EACH,CAXD;EAaA;AACJ;AACA;AACA;AACA;;;EACInC,EAAE,CAAC3B,SAAH,CAAawE,aAAb,GAA6B,UAAS/B,GAAT,EAAc;IACvC,IAAIgC,KAAK,GAAGhC,GAAG,CAACiC,iBAAJ,CAAsB,OAAtB,CAAZ;;IACA,IAAID,KAAJ,EAAW;MACP,KAAKpD,MAAL,GAAcsD,QAAQ,CAACF,KAAK,CAACG,KAAN,CAAY,MAAZ,EAAoBC,GAApB,EAAD,EAA4B,EAA5B,CAAR,GAA0C,CAAxD;IACH;EACJ,CALD;EAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIlD,EAAE,CAAC3B,SAAH,CAAa8E,SAAb,GAAyB,UAASrC,GAAT,EAAc;IACnC,IAAIA,GAAG,GAAG,IAAIC,cAAJ,EAAV;IACAD,GAAG,CAACE,IAAJ,CAAS,QAAT,EAAmB,KAAKa,YAAxB,EAAsC,IAAtC;IACAf,GAAG,CAACG,gBAAJ,CAAqB,eAArB,EAAsC,YAAY,KAAK3B,KAAvD;;IAEAwB,GAAG,CAACI,MAAJ,GAAa,UAASC,CAAT,EAAY;MAErB;MACA,IAAIA,CAAC,CAACC,MAAF,CAASC,MAAT,GAAkB,GAAtB,EAA2B;QACvB,IAAI+B,QAAQ,GAAGjC,CAAC,CAACC,MAAF,CAAS2B,iBAAT,CAA2B,UAA3B,CAAf,CADuB,CAGvB;;QACA,IAAIM,QAAQ,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,EAAoBJ,GAApB,EAAf,CAJuB,CAKnB;;QACJ,KAAKK,kBAAL,CAAwBF,QAAxB;MACH,CAPD,MAOO;QACH,KAAKG,gBAAL,CAAsBrC,CAAtB;MACH;IACJ,CAbY,CAaXc,IAbW,CAaN,IAbM,CAAb;;IAeAnB,GAAG,CAACoB,OAAJ,GAAc,KAAKsB,gBAAL,CAAsBvB,IAAtB,CAA2B,IAA3B,CAAd;IACAnB,GAAG,CAACqB,IAAJ;EACH,CAtBD;EAwBA;AACJ;AACA;AACA;AACA;AACA;;;EACInC,EAAE,CAAC3B,SAAH,CAAakF,kBAAb,GAAkC,UAASF,QAAT,EAAmB;IACjD,IAAI5C,GAAG,GAAG,KAAKE,SAAL,CAAe0C,QAAf,EAAyB,EAAzB,EAA6BpE,QAAQ,CAACC,OAAT,GAAmB,UAAhD,CAAV;IACA,IAAImB,UAAU,GAAG,OAAjB;IACA,IAAIS,GAAG,GAAG,IAAIC,cAAJ,EAAV;IAEAD,GAAG,CAACE,IAAJ,CAASX,UAAT,EAAqBI,GAArB,EAA0B,IAA1B;IACAK,GAAG,CAACG,gBAAJ,CAAqB,eAArB,EAAsC,YAAY,KAAK3B,KAAvD;;IACAwB,GAAG,CAACI,MAAJ,GAAa,UAASC,CAAT,EAAY;MACrB;MACA,KAAKsC,cAAL,CAAoBtC,CAApB,EAAuBkC,QAAvB;IACH,CAHY,CAGXpB,IAHW,CAGN,IAHM,CAAb;;IAIAnB,GAAG,CAACqB,IAAJ,CAAS,KAAKuB,WAAL,CAAiB,KAAKnD,SAAtB,CAAT;EACH,CAZD;EAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIP,EAAE,CAAC3B,SAAH,CAAaoF,cAAb,GAA8B,UAAStC,CAAT,EAAYkC,QAAZ,EAAsB;IAChD;IACA,IAAIlC,CAAC,CAACC,MAAF,CAASC,MAAT,GAAkB,GAAtB,EAA2B;MACvB,IAAIF,CAAC,CAACC,MAAF,CAASE,QAAb,EAAuB;QACnB;QACA,IAAIqC,IAAI,GAAGpC,IAAI,CAACC,KAAL,CAAWL,CAAC,CAACC,MAAF,CAASE,QAApB,CAAX,CAFmB,CAGf;;QACJ,IAAIsC,KAAK,GAAG,KAAKpE,QAAL,CAAcqE,IAAd,CAAmBF,IAAnB,IAA2B,CAAvC,CAJmB,CAKf;;QACJ,KAAK9D,UAAL,CAAgBwD,QAAhB,EAA0BO,KAA1B;MACH,CAPD,MAOO;QACH,KAAKJ,gBAAL,CAAsBrC,CAAtB;MACH;IACJ;EACJ,CAdD;EAgBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACInB,EAAE,CAAC3B,SAAH,CAAaqE,uBAAb,GAAuC,UAASvB,CAAT,EAAY;IAC/C,IAAIA,CAAC,CAACC,MAAF,CAASC,MAAT,IAAmB,GAAnB,IAA0BF,CAAC,CAACC,MAAF,CAASC,MAAT,IAAmB,GAAjD,EAAsD;MAClD,KAAK8B,SAAL;IACH,CAFD,MAEO,IAAIhC,CAAC,CAACC,MAAF,CAASC,MAAT,IAAmB,GAAvB,EAA4B;MAC/B,KAAKwB,aAAL,CAAmB1B,CAAC,CAACC,MAArB;MACA,KAAKxB,YAAL,CAAkBlB,KAAlB;MACA,KAAKqD,SAAL;IACH;EACJ,CARD;EAUA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI/B,EAAE,CAAC3B,SAAH,CAAasE,qBAAb,GAAqC,UAASxB,CAAT,EAAY;IAC7C,IAAIA,CAAC,CAACC,MAAF,CAASC,MAAT,IAAmBF,CAAC,CAACC,MAAF,CAASC,MAAT,GAAkB,GAAzC,EAA8C;MAC1C,KAAKtB,OAAL,CAAaoB,CAAC,CAACC,MAAF,CAASE,QAAtB;IACH,CAFD,MAEO;MACH,KAAK1B,YAAL,CAAkBtB,KAAlB,CAAwB,KAAKsE,OAAL,EAAxB;IACH;EACJ,CAND;EAQA;AACJ;AACA;AACA;AACA;AACA;;;EACI5C,EAAE,CAAC3B,SAAH,CAAamF,gBAAb,GAAgC,UAASrC,CAAT,EAAY;IACxC,KAAKpB,OAAL,CAAaoB,CAAC,CAACC,MAAF,CAASE,QAAtB,EADwC,CACP;EACpC,CAFD;EAIA;AACJ;AACA;AACA;AACA;AACA;;;EACItB,EAAE,CAAC3B,SAAH,CAAa2D,cAAb,GAA8B,UAASb,CAAT,EAAY;IACtC,KAAKpB,OAAL,CAAaoB,CAAC,CAACC,MAAF,CAASE,QAAtB,EADsC,CACL;EACpC,CAFD;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACItB,EAAE,CAAC3B,SAAH,CAAaqF,WAAb,GAA2B,UAAShD,MAAT,EAAiB;IACxCA,MAAM,GAAGA,MAAM,IAAI,EAAnB;IACA,OAAOoD,MAAM,CAACC,IAAP,CAAYrD,MAAZ,EAAoBsD,GAApB,CAAwB,UAASC,GAAT,EAAc;MACzC,OAAOC,kBAAkB,CAACD,GAAD,CAAlB,GAA0B,GAA1B,GAAgCC,kBAAkB,CAACxD,MAAM,CAACuD,GAAD,CAAP,CAAzD;IACH,CAFM,EAEJE,IAFI,CAEC,GAFD,CAAP;EAGH,CALD;EAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACInE,EAAE,CAAC3B,SAAH,CAAasC,SAAb,GAAyB,UAASyD,EAAT,EAAa1D,MAAb,EAAqBE,OAArB,EAA8B;IACnD,IAAIH,GAAG,GAAGG,OAAO,IAAI3B,QAAQ,CAACC,OAAT,GAAmB,YAAxC;;IACA,IAAIkF,EAAJ,EAAQ;MACJ3D,GAAG,IAAI2D,EAAP;IACH;;IACD,IAAIC,KAAK,GAAG,KAAKX,WAAL,CAAiBhD,MAAjB,CAAZ;;IACA,IAAI2D,KAAJ,EAAW;MACP5D,GAAG,IAAI,MAAM4D,KAAb;IACH;;IACD,OAAO5D,GAAP;EACH,CAVD;;EAYA,OAAOT,EAAP;AACH,CA3aA,CAAD"},"metadata":{},"sourceType":"script"}