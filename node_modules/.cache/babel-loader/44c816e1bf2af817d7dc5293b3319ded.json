{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseValueAndUnit;\n/**\n * Determines the unit of a string and parses the value\n *\n * @param {string} str\n * @param {object} out\n * @return {object} The parsed value and the unit if any\n */\n\nfunction parseValueAndUnit(str) {\n  var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    value: 0,\n    unit: 'px'\n  };\n  var isValid = typeof str === 'number' || typeof str === 'string';\n\n  if (!isValid) {\n    throw new Error('Invalid value provided. Must provide a value as a string or number');\n  }\n\n  str = String(str);\n  out.value = parseFloat(str, 10);\n  out.unit = str.match(/[\\d.\\-\\+]*\\s*(.*)/)[1] || '%'; // default to percent\n\n  var validUnits = ['px', '%'];\n  var isValidUnit = validUnits.find(function (unit) {\n    return unit === out.unit;\n  });\n\n  if (!isValidUnit) {\n    throw new Error('Invalid unit provided. Must provide a unit of px in or %');\n  }\n\n  return out;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","parseValueAndUnit","str","out","arguments","length","undefined","unit","isValid","Error","String","parseFloat","match","validUnits","isValidUnit","find"],"sources":["/var/www/netlear/html/clientNetlear/node_modules/react-scroll-parallax/cjs/utils/parseValueAndUnit.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseValueAndUnit;\n\n/**\n * Determines the unit of a string and parses the value\n *\n * @param {string} str\n * @param {object} out\n * @return {object} The parsed value and the unit if any\n */\nfunction parseValueAndUnit(str) {\n  var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    value: 0,\n    unit: 'px'\n  };\n  var isValid = typeof str === 'number' || typeof str === 'string';\n\n  if (!isValid) {\n    throw new Error('Invalid value provided. Must provide a value as a string or number');\n  }\n\n  str = String(str);\n  out.value = parseFloat(str, 10);\n  out.unit = str.match(/[\\d.\\-\\+]*\\s*(.*)/)[1] || '%'; // default to percent\n\n  var validUnits = ['px', '%'];\n  var isValidUnit = validUnits.find(function (unit) {\n    return unit === out.unit;\n  });\n\n  if (!isValidUnit) {\n    throw new Error('Invalid unit provided. Must provide a unit of px in or %');\n  }\n\n  return out;\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,iBAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,iBAAT,CAA2BC,GAA3B,EAAgC;EAC9B,IAAIC,GAAG,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE;IAC5EL,KAAK,EAAE,CADqE;IAE5EQ,IAAI,EAAE;EAFsE,CAA9E;EAIA,IAAIC,OAAO,GAAG,OAAON,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAAxD;;EAEA,IAAI,CAACM,OAAL,EAAc;IACZ,MAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;EACD;;EAEDP,GAAG,GAAGQ,MAAM,CAACR,GAAD,CAAZ;EACAC,GAAG,CAACJ,KAAJ,GAAYY,UAAU,CAACT,GAAD,EAAM,EAAN,CAAtB;EACAC,GAAG,CAACI,IAAJ,GAAWL,GAAG,CAACU,KAAJ,CAAU,mBAAV,EAA+B,CAA/B,KAAqC,GAAhD,CAb8B,CAauB;;EAErD,IAAIC,UAAU,GAAG,CAAC,IAAD,EAAO,GAAP,CAAjB;EACA,IAAIC,WAAW,GAAGD,UAAU,CAACE,IAAX,CAAgB,UAAUR,IAAV,EAAgB;IAChD,OAAOA,IAAI,KAAKJ,GAAG,CAACI,IAApB;EACD,CAFiB,CAAlB;;EAIA,IAAI,CAACO,WAAL,EAAkB;IAChB,MAAM,IAAIL,KAAJ,CAAU,0DAAV,CAAN;EACD;;EAED,OAAON,GAAP;AACD"},"metadata":{},"sourceType":"script"}