{"ast":null,"code":"import authAPI from './api';\nimport { setSpinFalse, setSpinTrue } from '../spinner';\nimport { removeLS, getLS, setLS } from '../../../utils/LocalStorage';\nimport { message } from 'antd';\nexport const setUserToken = token => ({\n  type: 'SET_USER_TOKEN',\n  token: token\n});\nexport const setUserData = data => ({\n  type: 'SET_USER_DATA',\n  data: data\n});\nexport const setUserAvatar = picture => ({\n  type: 'SET_USER_AVATAR',\n  picture: picture\n});\nexport const setUserLogout = () => ({\n  type: 'SET_LOGOUT'\n});\nexport const fetchSignUp = values => dispatch => {\n  const userData = {\n    firstName: values.firstName,\n    lastName: values.lastName,\n    email: values.email,\n    password: values.password\n  };\n  authAPI.signUp(userData).then(data => {\n    // debugger;\n    // setLS('EDMED_USER_TOKEN', data.token);\n    // dispatch(setUserToken(data.token));\n    // console.log(data);\n    message.success('Письмо с подтверждением выслано на указанный Email');\n    dispatch(setSpinFalse());\n  }).catch(error => {\n    // debugger;\n    if (error.response.status === 401) {\n      message.error('Данный Email уже зарегистрирован');\n      dispatch(setSpinFalse());\n    }\n\n    console.log(error);\n  });\n};\nexport const fetchAuthorization = id => dispatch => {\n  dispatch(setSpinTrue());\n  authAPI.authorization(id).then(data => {\n    dispatch(setUserToken(data.token));\n    console.log(data);\n    dispatch(setSpinFalse());\n  }).catch(error => console.log(error));\n};\nexport const fetchAuthMe = () => dispatch => {\n  const userToken = getLS('EDMED_USER_TOKEN');\n  dispatch(setSpinTrue());\n  authAPI.authMe().then(data => {\n    // debugger;\n    console.log(data);\n    dispatch(setUserData(data));\n    dispatch(setSpinFalse());\n  }).catch(error => console.log(error));\n};\nexport const fetchLogout = () => dispatch => {\n  dispatch(setSpinTrue());\n  authAPI.logout().then(data => {\n    //   debugger;\n    console.log(data);\n    dispatch(setUserLogout());\n    removeLS('EDMED_USER_TOKEN');\n    dispatch(setSpinFalse());\n    message.success('Вы успешно покинули сессию');\n  }).catch(error => {\n    debugger;\n    console.log(error);\n  });\n};\nexport const fetchLogIn = data => dispatch => {\n  dispatch(setSpinTrue());\n  authAPI.logIn(data).then(data => {\n    console.log(data); // dispatch(setUserData(data));\n\n    dispatch(setUserToken(data.token));\n    setLS('EDMED_USER_TOKEN', data.token);\n    message.success('Вы успешно авторизовались');\n    dispatch(setSpinFalse());\n  }).catch(error => {\n    debugger;\n    console.log(error);\n    dispatch(setSpinFalse());\n  });\n}; //Google reg\n// export const fetchGoogleToken = () => (dispatch) => {\n//   authAPI\n//     .authGoogle()\n//     .then((data) => console.log(data))\n//     .catch((error) => console.log(error));\n// };","map":{"version":3,"names":["authAPI","setSpinFalse","setSpinTrue","removeLS","getLS","setLS","message","setUserToken","token","type","setUserData","data","setUserAvatar","picture","setUserLogout","fetchSignUp","values","dispatch","userData","firstName","lastName","email","password","signUp","then","success","catch","error","response","status","console","log","fetchAuthorization","id","authorization","fetchAuthMe","userToken","authMe","fetchLogout","logout","fetchLogIn","logIn"],"sources":["/home/gapasil/Рабочий стол/Загрузки/дз/javascript/netlear/clientNetlear/src/redux/actions/Auth/Auth.js"],"sourcesContent":["import authAPI from './api';\nimport { setSpinFalse, setSpinTrue } from '../spinner';\nimport { removeLS, getLS, setLS } from '../../../utils/LocalStorage';\nimport { message } from 'antd';\n\nexport const setUserToken = (token) => ({\n  type: 'SET_USER_TOKEN',\n  token: token,\n});\n\nexport const setUserData = (data) => ({\n  type: 'SET_USER_DATA',\n  data: data,\n});\n\nexport const setUserAvatar = (picture) => ({\n  type: 'SET_USER_AVATAR',\n  picture: picture,\n});\n\nexport const setUserLogout = () => ({\n  type: 'SET_LOGOUT',\n});\n\nexport const fetchSignUp = (values) => (dispatch) => {\n  const userData = {\n    firstName: values.firstName,\n    lastName: values.lastName,\n    email: values.email,\n    password: values.password,\n  };\n\n  authAPI\n    .signUp(userData)\n    .then((data) => {\n      // debugger;\n      // setLS('EDMED_USER_TOKEN', data.token);\n      // dispatch(setUserToken(data.token));\n      // console.log(data);\n      message.success('Письмо с подтверждением выслано на указанный Email');\n      dispatch(setSpinFalse());\n    })\n    .catch((error) => {\n      // debugger;\n      if (error.response.status === 401) {\n        message.error('Данный Email уже зарегистрирован');\n        dispatch(setSpinFalse());\n      }\n      console.log(error);\n    });\n};\n\nexport const fetchAuthorization = (id) => (dispatch) => {\n  dispatch(setSpinTrue());\n  authAPI\n    .authorization(id)\n    .then((data) => {\n      dispatch(setUserToken(data.token));\n      console.log(data);\n      dispatch(setSpinFalse());\n    })\n    .catch((error) => console.log(error));\n};\n\nexport const fetchAuthMe = () => (dispatch) => {\n  const userToken = getLS('EDMED_USER_TOKEN');\n  dispatch(setSpinTrue());\n  authAPI\n    .authMe()\n    .then((data) => {\n      // debugger;\n      console.log(data);\n      dispatch(setUserData(data));\n      dispatch(setSpinFalse());\n    })\n    .catch((error) => console.log(error));\n};\n\nexport const fetchLogout = () => (dispatch) => {\n  dispatch(setSpinTrue());\n  authAPI\n    .logout()\n    .then((data) => {\n      //   debugger;\n      console.log(data);\n      dispatch(setUserLogout());\n      removeLS('EDMED_USER_TOKEN');\n      dispatch(setSpinFalse());\n      message.success('Вы успешно покинули сессию');\n    })\n    .catch((error) => {\n      debugger;\n      console.log(error);\n    });\n};\n\nexport const fetchLogIn = (data) => (dispatch) => {\n  dispatch(setSpinTrue());\n  authAPI\n    .logIn(data)\n    .then((data) => {\n      console.log(data);\n      // dispatch(setUserData(data));\n      dispatch(setUserToken(data.token));\n      setLS('EDMED_USER_TOKEN', data.token);\n      message.success('Вы успешно авторизовались');\n      dispatch(setSpinFalse());\n    })\n    .catch((error) => {\n      debugger;\n      console.log(error);\n      dispatch(setSpinFalse());\n    });\n};\n\n//Google reg\n\n// export const fetchGoogleToken = () => (dispatch) => {\n//   authAPI\n//     .authGoogle()\n//     .then((data) => console.log(data))\n//     .catch((error) => console.log(error));\n// };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}