{"ast":null,"code":"var _jsxFileName = \"/var/www/netlear/html/clientNetlear/src/components/EventDeployPanel/EventDeployPanel.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './EventDeployPanel.scss';\nimport { Progress, Upload } from 'antd';\nimport { CheckCircleFilled, ClockCircleFilled } from '@ant-design/icons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setMaunContentVebinarsSettings } from '../../redux/actions/eventRedactor/eventRedactor';\nimport { setVideosFromRedactor, setVideoUploadingProcess, setVideoURI, setVideoTranscodingStatus, setVideoURL, fetchPostEventData, fetchPostEventPictures } from '../../redux/actions/UploadingCourse/UploadingCourse';\nimport { testUploadVimeoVids, testCheckTranscodingVimeoVids, testGetVimeoVidsURL } from '../../utils/testVimeo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction EventDeployPanel() {\n  _s();\n\n  const eventData = useSelector(state => state.eventRedactor);\n  const vebinarsData = useSelector(state => state.eventRedactor.mainContent.data.vebinars);\n  const uploadingData = useSelector(state => state.UploadingCourse);\n  const [videoURLFlag, setVideoURLFlag] = React.useState(true); // const [checkTranscodingFlag, setCheckTranscodingFlag] = React.useState(true);\n\n  const dispatch = useDispatch();\n\n  const dispatchUploadingVideoProcess = (percent, index) => {\n    dispatch(setVideoUploadingProcess(percent, index));\n  }; // const dispatchVideoURI = (uri, index) => {\n  //   dispatch(setVideoURI(uri, index));\n  // };\n  // const dispatchVideoTranscodingStatus = (status, index) => {\n  //   dispatch(setVideoTranscodingStatus(status, index));\n  // };\n  // const dispatchVideoURL = (url, index) => {\n  //   dispatch(setVideoURL(url, index));\n  // };\n  // React.useEffect(() => {\n  //   testOnLoad();\n  // }, []);\n  // React.useEffect(() => {\n  //   uploadingData.videoList.forEach((el, i) => {\n  //     if (el.videoURI && !el.videoURL && videoURLFlag) {\n  //       setVideoURLFlag(false);\n  //       testGetVimeoVidsURL(el.videoURI, dispatchVideoURL, i);\n  //     }\n  //   });\n  // }, [uploadingData.videoList, videoURLFlag]);\n  // React.useEffect(() => {\n  //   if (uploadingData.videoList.find((el) => !el.videoURL)) {\n  //     setTimeout(() => {\n  //       setVideoURLFlag(true);\n  //     }, 3000);\n  //   } else if (uploadingData.videoList.every((el) => el.videoURL)) {\n  //     uploadFullCourseData();\n  //   }\n  // }, [!videoURLFlag]);\n  // React.useEffect(() => {\n  //   if (uploadingData.postedCourseId) {\n  //     uploadFullCourseImgs();\n  //   }\n  // }, [uploadingData.postedCourseId]);\n  // React.useEffect(() => {\n  //   if (uploadingData.videoList.find((el) => el.transcodingStatus !== 'complete')) {\n  //     setTimeout(() => {\n  //       // console.log('flag:', checkTranscodingFlag);\n  //       setCheckTranscodingFlag(true);\n  //     }, 5000);\n  //   }\n  // }, [!checkTranscodingFlag]);\n  // const testOnLoad = () => {\n  //   uploadVideoFiles(uploadingData.videoList);\n  // };\n  // const uploadVideoFiles = async (videoArray) => {\n  //   await videoArray.forEach(async (el, i) => {\n  //     testUploadVimeoVids(\n  //       el.video,\n  //       `${el.videoName}`,\n  //       `${el.videoDescription}`,\n  //       dispatchUploadingVideoProcess,\n  //       dispatchVideoURI,\n  //       i,\n  //     );\n  //   });\n  // };\n  // const checkTranscodingVideoStatus = (videoURI) => {\n  //   testCheckTranscodingVimeoVids(videoURI, setVideoTranscodingStatus);\n  // };\n\n\n  const testAppendVideo = async e => {\n    const video = e;\n    console.log(video.type, video.name);\n    const dataObj = {\n      isPaid: true,\n      format: 'recording',\n      date: '',\n      cost: 0,\n      currency: 'RUB',\n      promoCode: '',\n      personalDiscount: 0,\n      video: video,\n      videoName: video.name,\n      videoDescription: video.type\n    };\n    await vebinarsData.forEach((el, i) => dispatch(setMaunContentVebinarsSettings(dataObj, i)));\n  };\n\n  const uploadFullCourseData = async () => {\n    //Замена всех картинок в курсе на пустую строку (для их дальнейшей загрузки через формдату)\n    //замена всех полей video на уже сформированную ссылку из UploadingCourse.videoList\n    const videoList = uploadingData.videoList;\n    const fullCourseData = {\n      banner: { ...eventData.banner.data,\n        backgroundImg: ''\n      },\n      mainContent: { ...eventData.mainContent.data,\n        vebinars: eventData.mainContent.data.vebinars.map((el, i) => {\n          return { ...el,\n            promoImg: '',\n            video: videoList[i] ? videoList[i].videoURL : false\n          };\n        })\n      },\n      aboutSpeaker: { ...eventData.aboutSpeaker.data,\n        img: '',\n        video: videoList[videoList.length - 1].videoURL\n      }\n    };\n    await dispatch(fetchPostEventData(fullCourseData));\n  };\n\n  const uploadFullCourseImgs = async () => {\n    const imgKeys = Object.keys(uploadingData.courseFiles);\n    const imgValues = Object.values(uploadingData.courseFiles);\n    console.log(imgKeys, imgValues);\n    await imgKeys.map(async (el, i) => {\n      if (el === 'webinarsImg') {\n        await imgValues[i].map(async (el2, i) => {\n          let bodyFormData = new FormData();\n          bodyFormData.append('webinarImg', el2.file, el2.index);\n\n          for (var value of bodyFormData.values()) {\n            await dispatch(fetchPostEventPictures(uploadingData.postedCourseId, bodyFormData));\n          }\n\n          return;\n        });\n      } else {\n        let bodyFormData = new FormData();\n        bodyFormData.append(`${el}`, imgValues[i]);\n\n        for (var value of bodyFormData.values()) {\n          await dispatch(fetchPostEventPictures(uploadingData.postedCourseId, bodyFormData));\n        }\n\n        return;\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deploy-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deploy-panel__title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u042D\\u0442\\u0430 \\u043F\\u0430\\u043D\\u0435\\u043B\\u044C \\u043E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0436\\u0430\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0446\\u0435\\u0441\\u0441 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438 \\u0412\\u0430\\u0448\\u0435\\u0433\\u043E \\u043A\\u0443\\u0440\\u0441\\u0430, \\u043F\\u043E\\u044D\\u0442\\u0430\\u043F\\u043D\\u043E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u041F\\u043E\\u0436\\u0430\\u043B\\u0443\\u0439\\u0441\\u0442\\u0430, \\u043D\\u0435 \\u0432\\u044B\\u043A\\u043B\\u044E\\u0447\\u0430\\u0439\\u0442\\u0435 \\u043A\\u043E\\u043C\\u043F\\u044C\\u044E\\u0442\\u0435\\u0440 \\u0438 \\u043D\\u0435 \\u0437\\u0430\\u043A\\u0440\\u044B\\u0432\\u0430\\u0439\\u0442\\u0435 \\u0441\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0443 \\u0434\\u043E \\u043F\\u043E\\u043B\\u043D\\u043E\\u0433\\u043E \\u0437\\u0430\\u0432\\u0435\\u0440\\u0448\\u0435\\u043D\\u0438\\u044F \\u0432\\u0441\\u0435\\u0445 \\u043F\\u0440\\u043E\\u0446\\u0435\\u0441\\u0441\\u043E\\u0432\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deploy-panel__content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u041D\\u0430\\u0447\\u0438\\u043D\\u0430\\u044E \\u043F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u0438\\u0435 \\u043A\\u043B\\u044E\\u0447\\u0435\\u0439 \\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u0430 \\u0438 \\u043F\\u0440\\u043E\\u0446\\u0435\\u0441\\u0441 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), uploadingData.videoList.length && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deploy-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"deploy-content__title\",\n            children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0436\\u0430\\u044E \\u0432\\u0438\\u0434\\u0435\\u043E-\\u0444\\u0430\\u0439\\u043B\\u044B \\u043D\\u0430 \\u0445\\u043E\\u0441\\u0442\\u0438\\u043D\\u0433\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this), uploadingData.videoList.map((el, i) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"deploy-content__item\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: el.videoName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Progress, {\n                percent: el.uploadingProcess\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 21\n              }, this), el.videoURI ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"deploy-content__item_block\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"\\u041A\\u043B\\u044E\\u0447 \\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u0430 \\u043F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(CheckCircleFilled, {\n                  style: {\n                    color: '#52c41a'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 23\n              }, this) : el.uploadingProcess === 100 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"deploy-content__item_block\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0430\\u044E \\u043A\\u043B\\u044E\\u0447 \\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u0430\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(ClockCircleFilled, {\n                  style: {\n                    color: '#0080ff'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 23\n              }, this) : '', el.videoURL ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"deploy-content__item_block\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"\\u0421\\u0441\\u044B\\u043B\\u043A\\u0430 \\u043D\\u0430 \\u0432\\u0438\\u0434\\u0435\\u043E \\u043F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u0430\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(CheckCircleFilled, {\n                  style: {\n                    color: '#52c41a'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 23\n              }, this) : el.uploadingProcess === 100 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"deploy-content__item_block\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0430\\u044E \\u0441\\u0441\\u044B\\u043B\\u043A\\u0443 \\u043D\\u0430 \\u043F\\u0435\\u0440\\u0435\\u043A\\u043E\\u0434\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(ClockCircleFilled, {\n                  style: {\n                    color: '#0080ff'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 23\n              }, this) : '']\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deploy-panel__content\",\n        children: [uploadingData.videoList.every(el => el.videoURL) && /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"deploy-content__title\",\n          children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0436\\u0430\\u044E \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u043E \\u043A\\u0443\\u0440\\u0441\\u0435 \\u043D\\u0430 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"deploy-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"deploy-content__item\",\n            children: uploadingData.postedCourseId ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"deploy-content__item_block\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"JSON \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0435\\u043D\\u044B\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(CheckCircleFilled, {\n                style: {\n                  color: '#52c41a'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 17\n            }, this) : uploadingData.videoList.every(el => el.videoURL) ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"deploy-content__item_block\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0436\\u0430\\u044E JSON \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ClockCircleFilled, {\n                style: {\n                  color: '#0080ff'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 17\n            }, this) : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"deploy-content__item\",\n            children: uploadingData.isImagesUploaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"deploy-content__item_block\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u0424\\u043E\\u0442\\u043E \\u043C\\u0430\\u0442\\u0435\\u0440\\u0438\\u0430\\u043B\\u044B \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0435\\u043D\\u044B\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(CheckCircleFilled, {\n                style: {\n                  color: '#52c41a'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this) : uploadingData.postedCourseId ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"deploy-content__item_block\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0436\\u0430\\u044E \\u0444\\u043E\\u0442\\u043E \\u043C\\u0430\\u0442\\u0435\\u0440\\u0438\\u0430\\u043B\\u044B\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ClockCircleFilled, {\n                style: {\n                  color: '#0080ff'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }, this) : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deploy-overlay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(EventDeployPanel, \"EVvETa+e51XylILaLyz2aHhE/6s=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = EventDeployPanel;\nexport default EventDeployPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventDeployPanel\");","map":{"version":3,"names":["React","Progress","Upload","CheckCircleFilled","ClockCircleFilled","useSelector","useDispatch","setMaunContentVebinarsSettings","setVideosFromRedactor","setVideoUploadingProcess","setVideoURI","setVideoTranscodingStatus","setVideoURL","fetchPostEventData","fetchPostEventPictures","testUploadVimeoVids","testCheckTranscodingVimeoVids","testGetVimeoVidsURL","EventDeployPanel","eventData","state","eventRedactor","vebinarsData","mainContent","data","vebinars","uploadingData","UploadingCourse","videoURLFlag","setVideoURLFlag","useState","dispatch","dispatchUploadingVideoProcess","percent","index","testAppendVideo","e","video","console","log","type","name","dataObj","isPaid","format","date","cost","currency","promoCode","personalDiscount","videoName","videoDescription","forEach","el","i","uploadFullCourseData","videoList","fullCourseData","banner","backgroundImg","map","promoImg","videoURL","aboutSpeaker","img","length","uploadFullCourseImgs","imgKeys","Object","keys","courseFiles","imgValues","values","el2","bodyFormData","FormData","append","file","value","postedCourseId","uploadingProcess","videoURI","color","every","isImagesUploaded"],"sources":["/var/www/netlear/html/clientNetlear/src/components/EventDeployPanel/EventDeployPanel.jsx"],"sourcesContent":["import React from 'react';\nimport './EventDeployPanel.scss';\n\nimport { Progress, Upload } from 'antd';\nimport { CheckCircleFilled, ClockCircleFilled } from '@ant-design/icons';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setMaunContentVebinarsSettings } from '../../redux/actions/eventRedactor/eventRedactor';\nimport {\n  setVideosFromRedactor,\n  setVideoUploadingProcess,\n  setVideoURI,\n  setVideoTranscodingStatus,\n  setVideoURL,\n  fetchPostEventData,\n  fetchPostEventPictures,\n} from '../../redux/actions/UploadingCourse/UploadingCourse';\n\nimport {\n  testUploadVimeoVids,\n  testCheckTranscodingVimeoVids,\n  testGetVimeoVidsURL,\n} from '../../utils/testVimeo';\n\nfunction EventDeployPanel() {\n  const eventData = useSelector((state) => state.eventRedactor);\n  const vebinarsData = useSelector((state) => state.eventRedactor.mainContent.data.vebinars);\n  const uploadingData = useSelector((state) => state.UploadingCourse);\n  const [videoURLFlag, setVideoURLFlag] = React.useState(true);\n  // const [checkTranscodingFlag, setCheckTranscodingFlag] = React.useState(true);\n\n  const dispatch = useDispatch();\n\n  const dispatchUploadingVideoProcess = (percent, index) => {\n    dispatch(setVideoUploadingProcess(percent, index));\n  };\n  // const dispatchVideoURI = (uri, index) => {\n  //   dispatch(setVideoURI(uri, index));\n  // };\n\n  // const dispatchVideoTranscodingStatus = (status, index) => {\n  //   dispatch(setVideoTranscodingStatus(status, index));\n  // };\n\n  // const dispatchVideoURL = (url, index) => {\n  //   dispatch(setVideoURL(url, index));\n  // };\n\n  // React.useEffect(() => {\n  //   testOnLoad();\n  // }, []);\n\n  // React.useEffect(() => {\n  //   uploadingData.videoList.forEach((el, i) => {\n  //     if (el.videoURI && !el.videoURL && videoURLFlag) {\n  //       setVideoURLFlag(false);\n  //       testGetVimeoVidsURL(el.videoURI, dispatchVideoURL, i);\n  //     }\n  //   });\n  // }, [uploadingData.videoList, videoURLFlag]);\n\n  // React.useEffect(() => {\n  //   if (uploadingData.videoList.find((el) => !el.videoURL)) {\n  //     setTimeout(() => {\n  //       setVideoURLFlag(true);\n  //     }, 3000);\n  //   } else if (uploadingData.videoList.every((el) => el.videoURL)) {\n  //     uploadFullCourseData();\n  //   }\n  // }, [!videoURLFlag]);\n\n  // React.useEffect(() => {\n  //   if (uploadingData.postedCourseId) {\n  //     uploadFullCourseImgs();\n  //   }\n  // }, [uploadingData.postedCourseId]);\n\n  // React.useEffect(() => {\n  //   if (uploadingData.videoList.find((el) => el.transcodingStatus !== 'complete')) {\n  //     setTimeout(() => {\n  //       // console.log('flag:', checkTranscodingFlag);\n  //       setCheckTranscodingFlag(true);\n  //     }, 5000);\n  //   }\n  // }, [!checkTranscodingFlag]);\n\n  // const testOnLoad = () => {\n  //   uploadVideoFiles(uploadingData.videoList);\n  // };\n\n  // const uploadVideoFiles = async (videoArray) => {\n  //   await videoArray.forEach(async (el, i) => {\n  //     testUploadVimeoVids(\n  //       el.video,\n  //       `${el.videoName}`,\n  //       `${el.videoDescription}`,\n  //       dispatchUploadingVideoProcess,\n  //       dispatchVideoURI,\n  //       i,\n  //     );\n  //   });\n  // };\n\n  // const checkTranscodingVideoStatus = (videoURI) => {\n  //   testCheckTranscodingVimeoVids(videoURI, setVideoTranscodingStatus);\n  // };\n\n  const testAppendVideo = async (e) => {\n    const video = e;\n    console.log(video.type, video.name);\n    const dataObj = {\n      isPaid: true,\n      format: 'recording',\n      date: '',\n      cost: 0,\n      currency: 'RUB',\n      promoCode: '',\n      personalDiscount: 0,\n      video: video,\n      videoName: video.name,\n      videoDescription: video.type,\n    };\n    await vebinarsData.forEach((el, i) => dispatch(setMaunContentVebinarsSettings(dataObj, i)));\n  };\n\n  const uploadFullCourseData = async () => {\n    //Замена всех картинок в курсе на пустую строку (для их дальнейшей загрузки через формдату)\n    //замена всех полей video на уже сформированную ссылку из UploadingCourse.videoList\n    const videoList = uploadingData.videoList;\n    const fullCourseData = {\n      banner: { ...eventData.banner.data, backgroundImg: '' },\n      mainContent: {\n        ...eventData.mainContent.data,\n        vebinars: eventData.mainContent.data.vebinars.map((el, i) => {\n          return {\n            ...el,\n            promoImg: '',\n            video: videoList[i] ? videoList[i].videoURL : false,\n          };\n        }),\n      },\n      aboutSpeaker: {\n        ...eventData.aboutSpeaker.data,\n        img: '',\n        video: videoList[videoList.length - 1].videoURL,\n      },\n    };\n    await dispatch(fetchPostEventData(fullCourseData));\n  };\n\n  const uploadFullCourseImgs = async () => {\n    const imgKeys = Object.keys(uploadingData.courseFiles);\n    const imgValues = Object.values(uploadingData.courseFiles);\n    console.log(imgKeys, imgValues);\n    await imgKeys.map(async (el, i) => {\n      if (el === 'webinarsImg') {\n        await imgValues[i].map(async (el2, i) => {\n          let bodyFormData = new FormData();\n          bodyFormData.append('webinarImg', el2.file, el2.index);\n          for (var value of bodyFormData.values()) {\n            await dispatch(fetchPostEventPictures(uploadingData.postedCourseId, bodyFormData));\n          }\n          return;\n        });\n      } else {\n        let bodyFormData = new FormData();\n        bodyFormData.append(`${el}`, imgValues[i]);\n        for (var value of bodyFormData.values()) {\n          await dispatch(fetchPostEventPictures(uploadingData.postedCourseId, bodyFormData));\n        }\n        return;\n      }\n    });\n  };\n\n  return (\n    <>\n      <div className=\"deploy-panel\">\n        <div className=\"deploy-panel__title\">\n          <h2>Эта панель отображает процесс загрузки Вашего курса, поэтапно</h2>\n          <h3>\n            Пожалуйста, не выключайте компьютер и не закрывайте страницу до полного завершения всех\n            процессов\n          </h3>\n          {/* <button onClick={uploadVideoFiles}>test upload videos</button> */}\n          {/* <button onClick={checkTranscodingVideoStatus}>check transcoding video status</button> */}\n          {/* <button onClick={getVideoURL}> get video URL</button> */}\n          {/* <Upload action={testAppendVideo} listType=\"video\" maxCount={1}>\n            Видео\n          </Upload> */}\n          {/* <button\n            onClick={() =>\n              dispatch(setVideosFromRedactor(vebinarsData, eventData.aboutSpeaker.data))\n            }>\n            {' '}\n            pull vids\n          </button> */}\n          {/* <button onClick={testOnLoad}>test on load</button> */}\n          {/* <button onClick={uploadFullCourseData}> upload full course data</button> */}\n          {/* <button onClick={uploadFullCourseImgs}> upload full course imgs</button> */}\n        </div>\n        <div className=\"deploy-panel__content\">\n          <p>Начинаю получение ключей доступа и процесс загрузки данных...</p>\n          {uploadingData.videoList.length && (\n            <div className=\"deploy-content\">\n              <h4 className=\"deploy-content__title\">Загружаю видео-файлы на хостинг</h4>\n              {uploadingData.videoList.map((el, i) => {\n                return (\n                  <div className=\"deploy-content__item\" key={i}>\n                    <p>{el.videoName}</p>\n                    <Progress percent={el.uploadingProcess} />\n                    {el.videoURI ? (\n                      <div className=\"deploy-content__item_block\">\n                        <p>Ключ доступа получен</p>\n                        <CheckCircleFilled style={{ color: '#52c41a' }} />\n                      </div>\n                    ) : el.uploadingProcess === 100 ? (\n                      <div className=\"deploy-content__item_block\">\n                        <p>Получаю ключ доступа</p>\n                        <ClockCircleFilled style={{ color: '#0080ff' }} />\n                      </div>\n                    ) : (\n                      ''\n                    )}\n                    {el.videoURL ? (\n                      <div className=\"deploy-content__item_block\">\n                        <p>Ссылка на видео получена</p>\n                        <CheckCircleFilled style={{ color: '#52c41a' }} />\n                      </div>\n                    ) : el.uploadingProcess === 100 ? (\n                      <div className=\"deploy-content__item_block\">\n                        <span>Получаю ссылку на перекодирование</span>\n                        <ClockCircleFilled style={{ color: '#0080ff' }} />\n                      </div>\n                    ) : (\n                      ''\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n        <div className=\"deploy-panel__content\">\n          {uploadingData.videoList.every((el) => el.videoURL) && (\n            <h4 className=\"deploy-content__title\">Загружаю данные о курсе на сервер</h4>\n          )}\n          <div className=\"deploy-content\">\n            <div className=\"deploy-content__item\">\n              {uploadingData.postedCourseId ? (\n                <div className=\"deploy-content__item_block\">\n                  <p>JSON данные загружены</p>\n                  <CheckCircleFilled style={{ color: '#52c41a' }} />\n                </div>\n              ) : uploadingData.videoList.every((el) => el.videoURL) ? (\n                <div className=\"deploy-content__item_block\">\n                  <p>Загружаю JSON данные</p>\n                  <ClockCircleFilled style={{ color: '#0080ff' }} />\n                </div>\n              ) : (\n                ''\n              )}\n            </div>\n            <div className=\"deploy-content__item\">\n              {uploadingData.isImagesUploaded ? (\n                <div className=\"deploy-content__item_block\">\n                  <p>Фото материалы загружены</p>\n                  <CheckCircleFilled style={{ color: '#52c41a' }} />\n                </div>\n              ) : uploadingData.postedCourseId ? (\n                <div className=\"deploy-content__item_block\">\n                  <p>Загружаю фото материалы</p>\n                  <ClockCircleFilled style={{ color: '#0080ff' }} />\n                </div>\n              ) : (\n                ''\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"deploy-overlay\"></div>\n    </>\n  );\n}\n\nexport default EventDeployPanel;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}